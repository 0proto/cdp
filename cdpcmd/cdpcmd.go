// Code generated by cdpgen; DO NOT EDIT!

package cdpcmd

import (
	"encoding/json"

	"github.com/mafredri/cdp/cdptype"
)

// AccessibilityGetPartialAXTreeArgs contains the arguments for accessibilityGetPartialAXTree.
type AccessibilityGetPartialAXTreeArgs struct {
	NodeID         cdptype.DOMNodeID `json:"nodeId"`                   // ID of node to get the partial accessibility tree for.
	FetchRelatives *bool             `json:"fetchRelatives,omitempty"` // Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
}

// SetFetchRelatives sets the FetchRelatives optional argument. Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
func (a *AccessibilityGetPartialAXTreeArgs) SetFetchRelatives(fetchRelatives bool) *AccessibilityGetPartialAXTreeArgs {
	a.FetchRelatives = &fetchRelatives
	return a
}

// AccessibilityGetPartialAXTreeReply contains the return values for accessibilityGetPartialAXTree.
type AccessibilityGetPartialAXTreeReply struct {
	Nodes []cdptype.AccessibilityAXNode `json:"nodes"` // The Accessibility.AXNode for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.
}

// AnimationGetPlaybackRateReply contains the return values for animationGetPlaybackRate.
type AnimationGetPlaybackRateReply struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page.
}

// AnimationSetPlaybackRateArgs contains the arguments for animationSetPlaybackRate.
type AnimationSetPlaybackRateArgs struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page
}

// AnimationGetCurrentTimeArgs contains the arguments for animationGetCurrentTime.
type AnimationGetCurrentTimeArgs struct {
	ID string `json:"id"` // Id of animation.
}

// AnimationGetCurrentTimeReply contains the return values for animationGetCurrentTime.
type AnimationGetCurrentTimeReply struct {
	CurrentTime float64 `json:"currentTime"` // Current time of the page.
}

// AnimationSetPausedArgs contains the arguments for animationSetPaused.
type AnimationSetPausedArgs struct {
	Animations []string `json:"animations"` // Animations to set the pause state of.
	Paused     bool     `json:"paused"`     // Paused state to set to.
}

// AnimationSetTimingArgs contains the arguments for animationSetTiming.
type AnimationSetTimingArgs struct {
	AnimationID string  `json:"animationId"` // Animation id.
	Duration    float64 `json:"duration"`    // Duration of the animation.
	Delay       float64 `json:"delay"`       // Delay of the animation.
}

// AnimationSeekAnimationsArgs contains the arguments for animationSeekAnimations.
type AnimationSeekAnimationsArgs struct {
	Animations  []string `json:"animations"`  // List of animation ids to seek.
	CurrentTime float64  `json:"currentTime"` // Set the current time of each animation.
}

// AnimationReleaseAnimationsArgs contains the arguments for animationReleaseAnimations.
type AnimationReleaseAnimationsArgs struct {
	Animations []string `json:"animations"` // List of animation ids to seek.
}

// AnimationResolveAnimationArgs contains the arguments for animationResolveAnimation.
type AnimationResolveAnimationArgs struct {
	AnimationID string `json:"animationId"` // Animation id.
}

// AnimationResolveAnimationReply contains the return values for animationResolveAnimation.
type AnimationResolveAnimationReply struct {
	RemoteObject cdptype.RuntimeRemoteObject `json:"remoteObject"` // Corresponding remote object.
}

// ApplicationCacheGetFramesWithManifestsReply contains the return values for applicationcacheGetFramesWithManifests.
type ApplicationCacheGetFramesWithManifestsReply struct {
	FrameIDs []cdptype.ApplicationCacheFrameWithManifest `json:"frameIds"` // Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
}

// ApplicationCacheGetManifestForFrameArgs contains the arguments for applicationcacheGetManifestForFrame.
type ApplicationCacheGetManifestForFrameArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame containing document whose manifest is retrieved.
}

// ApplicationCacheGetManifestForFrameReply contains the return values for applicationcacheGetManifestForFrame.
type ApplicationCacheGetManifestForFrameReply struct {
	ManifestURL string `json:"manifestURL"` // Manifest URL for document in the given frame.
}

// ApplicationCacheGetApplicationCacheForFrameArgs contains the arguments for applicationcacheGetApplicationCacheForFrame.
type ApplicationCacheGetApplicationCacheForFrameArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame containing document whose application cache is retrieved.
}

// ApplicationCacheGetApplicationCacheForFrameReply contains the return values for applicationcacheGetApplicationCacheForFrame.
type ApplicationCacheGetApplicationCacheForFrameReply struct {
	ApplicationCache cdptype.ApplicationCache `json:"applicationCache"` // Relevant application cache data for the document in given frame.
}

// CSSGetMatchedStylesForNodeArgs contains the arguments for cssGetMatchedStylesForNode.
type CSSGetMatchedStylesForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// CSSGetMatchedStylesForNodeReply contains the return values for cssGetMatchedStylesForNode.
type CSSGetMatchedStylesForNodeReply struct {
	InlineStyle       *cdptype.CSSStyle                 `json:"inlineStyle,omitempty"`       // Inline style for the specified DOM node.
	AttributesStyle   *cdptype.CSSStyle                 `json:"attributesStyle,omitempty"`   // Attribute-defined element style (e.g. resulting from "width=20 height=100%").
	MatchedCSSRules   []cdptype.CSSRuleMatch            `json:"matchedCSSRules,omitempty"`   // CSS rules matching this node, from all applicable stylesheets.
	PseudoElements    []cdptype.CSSPseudoElementMatches `json:"pseudoElements,omitempty"`    // Pseudo style matches for this node.
	Inherited         []cdptype.CSSInheritedStyleEntry  `json:"inherited,omitempty"`         // A chain of inherited styles (from the immediate node parent up to the DOM tree root).
	CSSKeyframesRules []cdptype.CSSKeyframesRule        `json:"cssKeyframesRules,omitempty"` // A list of CSS keyframed animations matching this node.
}

// CSSGetInlineStylesForNodeArgs contains the arguments for cssGetInlineStylesForNode.
type CSSGetInlineStylesForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// CSSGetInlineStylesForNodeReply contains the return values for cssGetInlineStylesForNode.
type CSSGetInlineStylesForNodeReply struct {
	InlineStyle     *cdptype.CSSStyle `json:"inlineStyle,omitempty"`     // Inline style for the specified DOM node.
	AttributesStyle *cdptype.CSSStyle `json:"attributesStyle,omitempty"` // Attribute-defined element style (e.g. resulting from "width=20 height=100%").
}

// CSSGetComputedStyleForNodeArgs contains the arguments for cssGetComputedStyleForNode.
type CSSGetComputedStyleForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// CSSGetComputedStyleForNodeReply contains the return values for cssGetComputedStyleForNode.
type CSSGetComputedStyleForNodeReply struct {
	ComputedStyle []cdptype.CSSComputedStyleProperty `json:"computedStyle"` // Computed style for the specified DOM node.
}

// CSSGetPlatformFontsForNodeArgs contains the arguments for cssGetPlatformFontsForNode.
type CSSGetPlatformFontsForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// CSSGetPlatformFontsForNodeReply contains the return values for cssGetPlatformFontsForNode.
type CSSGetPlatformFontsForNodeReply struct {
	Fonts []cdptype.CSSPlatformFontUsage `json:"fonts"` // Usage statistics for every employed platform font.
}

// CSSGetStyleSheetTextArgs contains the arguments for cssGetStyleSheetText.
type CSSGetStyleSheetTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
}

// CSSGetStyleSheetTextReply contains the return values for cssGetStyleSheetText.
type CSSGetStyleSheetTextReply struct {
	Text string `json:"text"` // The stylesheet text.
}

// CSSCollectClassNamesArgs contains the arguments for cssCollectClassNames.
type CSSCollectClassNamesArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
}

// CSSCollectClassNamesReply contains the return values for cssCollectClassNames.
type CSSCollectClassNamesReply struct {
	ClassNames []string `json:"classNames"` // Class name list.
}

// CSSSetStyleSheetTextArgs contains the arguments for cssSetStyleSheetText.
type CSSSetStyleSheetTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Text         string                  `json:"text"`         //
}

// CSSSetStyleSheetTextReply contains the return values for cssSetStyleSheetText.
type CSSSetStyleSheetTextReply struct {
	SourceMapURL *string `json:"sourceMapURL,omitempty"` // URL of source map associated with script (if any).
}

// CSSSetRuleSelectorArgs contains the arguments for cssSetRuleSelector.
type CSSSetRuleSelectorArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	Selector     string                  `json:"selector"`     //
}

// CSSSetRuleSelectorReply contains the return values for cssSetRuleSelector.
type CSSSetRuleSelectorReply struct {
	SelectorList cdptype.CSSSelectorList `json:"selectorList"` // The resulting selector list after modification.
}

// CSSSetKeyframeKeyArgs contains the arguments for cssSetKeyframeKey.
type CSSSetKeyframeKeyArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	KeyText      string                  `json:"keyText"`      //
}

// CSSSetKeyframeKeyReply contains the return values for cssSetKeyframeKey.
type CSSSetKeyframeKeyReply struct {
	KeyText cdptype.CSSValue `json:"keyText"` // The resulting key text after modification.
}

// CSSSetStyleTextsArgs contains the arguments for cssSetStyleTexts.
type CSSSetStyleTextsArgs struct {
	Edits []cdptype.CSSStyleDeclarationEdit `json:"edits"` //
}

// CSSSetStyleTextsReply contains the return values for cssSetStyleTexts.
type CSSSetStyleTextsReply struct {
	Styles []cdptype.CSSStyle `json:"styles"` // The resulting styles after modification.
}

// CSSSetMediaTextArgs contains the arguments for cssSetMediaText.
type CSSSetMediaTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	Text         string                  `json:"text"`         //
}

// CSSSetMediaTextReply contains the return values for cssSetMediaText.
type CSSSetMediaTextReply struct {
	Media cdptype.CSSMedia `json:"media"` // The resulting CSS media rule after modification.
}

// CSSCreateStyleSheetArgs contains the arguments for cssCreateStyleSheet.
type CSSCreateStyleSheetArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame where "via-inspector" stylesheet should be created.
}

// CSSCreateStyleSheetReply contains the return values for cssCreateStyleSheet.
type CSSCreateStyleSheetReply struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` // Identifier of the created "via-inspector" stylesheet.
}

// CSSAddRuleArgs contains the arguments for cssAddRule.
type CSSAddRuleArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` // The css style sheet identifier where a new rule should be inserted.
	RuleText     string                  `json:"ruleText"`     // The text of a new rule.
	Location     cdptype.CSSSourceRange  `json:"location"`     // Text position of a new rule in the target style sheet.
}

// CSSAddRuleReply contains the return values for cssAddRule.
type CSSAddRuleReply struct {
	Rule cdptype.CSSRule `json:"rule"` // The newly created rule.
}

// CSSForcePseudoStateArgs contains the arguments for cssForcePseudoState.
type CSSForcePseudoStateArgs struct {
	NodeID              cdptype.DOMNodeID `json:"nodeId"`              // The element id for which to force the pseudo state.
	ForcedPseudoClasses []string          `json:"forcedPseudoClasses"` // Element pseudo classes to force when computing the element's style.
}

// CSSGetMediaQueriesReply contains the return values for cssGetMediaQueries.
type CSSGetMediaQueriesReply struct {
	Medias []cdptype.CSSMedia `json:"medias"` //
}

// CSSSetEffectivePropertyValueForNodeArgs contains the arguments for cssSetEffectivePropertyValueForNode.
type CSSSetEffectivePropertyValueForNodeArgs struct {
	NodeID       cdptype.DOMNodeID `json:"nodeId"`       // The element id for which to set property.
	PropertyName string            `json:"propertyName"` //
	Value        string            `json:"value"`        //
}

// CSSGetBackgroundColorsArgs contains the arguments for cssGetBackgroundColors.
type CSSGetBackgroundColorsArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get background colors for.
}

// CSSGetBackgroundColorsReply contains the return values for cssGetBackgroundColors.
type CSSGetBackgroundColorsReply struct {
	BackgroundColors []string `json:"backgroundColors,omitempty"` // The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load).
}

// CSSGetLayoutTreeAndStylesArgs contains the arguments for cssGetLayoutTreeAndStyles.
type CSSGetLayoutTreeAndStylesArgs struct {
	ComputedStyleWhitelist []string `json:"computedStyleWhitelist"` // Whitelist of computed styles to return.
}

// CSSGetLayoutTreeAndStylesReply contains the return values for cssGetLayoutTreeAndStyles.
type CSSGetLayoutTreeAndStylesReply struct {
	LayoutTreeNodes []cdptype.CSSLayoutTreeNode `json:"layoutTreeNodes"` //
	ComputedStyles  []cdptype.CSSComputedStyle  `json:"computedStyles"`  //
}

// CSSStopRuleUsageTrackingReply contains the return values for cssStopRuleUsageTracking.
type CSSStopRuleUsageTrackingReply struct {
	RuleUsage []cdptype.CSSRuleUsage `json:"ruleUsage"` //
}

// CacheStorageRequestCacheNamesArgs contains the arguments for cachestorageRequestCacheNames.
type CacheStorageRequestCacheNamesArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
}

// CacheStorageRequestCacheNamesReply contains the return values for cachestorageRequestCacheNames.
type CacheStorageRequestCacheNamesReply struct {
	Caches []cdptype.CacheStorageCache `json:"caches"` // Caches for the security origin.
}

// CacheStorageRequestEntriesArgs contains the arguments for cachestorageRequestEntries.
type CacheStorageRequestEntriesArgs struct {
	CacheID   cdptype.CacheStorageCacheID `json:"cacheId"`   // ID of cache to get entries from.
	SkipCount int                         `json:"skipCount"` // Number of records to skip.
	PageSize  int                         `json:"pageSize"`  // Number of records to fetch.
}

// CacheStorageRequestEntriesReply contains the return values for cachestorageRequestEntries.
type CacheStorageRequestEntriesReply struct {
	CacheDataEntries []cdptype.CacheStorageDataEntry `json:"cacheDataEntries"` // Array of object store data entries.
	HasMore          bool                            `json:"hasMore"`          // If true, there are more entries to fetch in the given range.
}

// CacheStorageDeleteCacheArgs contains the arguments for cachestorageDeleteCache.
type CacheStorageDeleteCacheArgs struct {
	CacheID cdptype.CacheStorageCacheID `json:"cacheId"` // Id of cache for deletion.
}

// CacheStorageDeleteEntryArgs contains the arguments for cachestorageDeleteEntry.
type CacheStorageDeleteEntryArgs struct {
	CacheID cdptype.CacheStorageCacheID `json:"cacheId"` // Id of cache where the entry will be deleted.
	Request string                      `json:"request"` // URL spec of the request.
}

// DOMGetDocumentArgs contains the arguments for domGetDocument.
type DOMGetDocumentArgs struct {
	Depth  *int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMGetDocumentArgs) SetDepth(depth int) *DOMGetDocumentArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
func (a *DOMGetDocumentArgs) SetPierce(pierce bool) *DOMGetDocumentArgs {
	a.Pierce = &pierce
	return a
}

// DOMGetDocumentReply contains the return values for domGetDocument.
type DOMGetDocumentReply struct {
	Root cdptype.DOMNode `json:"root"` // Resulting node.
}

// DOMGetFlattenedDocumentArgs contains the arguments for domGetFlattenedDocument.
type DOMGetFlattenedDocumentArgs struct {
	Depth  *int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMGetFlattenedDocumentArgs) SetDepth(depth int) *DOMGetFlattenedDocumentArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
func (a *DOMGetFlattenedDocumentArgs) SetPierce(pierce bool) *DOMGetFlattenedDocumentArgs {
	a.Pierce = &pierce
	return a
}

// DOMGetFlattenedDocumentReply contains the return values for domGetFlattenedDocument.
type DOMGetFlattenedDocumentReply struct {
	Nodes []cdptype.DOMNode `json:"nodes"` // Resulting node.
}

// DOMCollectClassNamesFromSubtreeArgs contains the arguments for domCollectClassNamesFromSubtree.
type DOMCollectClassNamesFromSubtreeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to collect class names.
}

// DOMCollectClassNamesFromSubtreeReply contains the return values for domCollectClassNamesFromSubtree.
type DOMCollectClassNamesFromSubtreeReply struct {
	ClassNames []string `json:"classNames"` // Class name list.
}

// DOMRequestChildNodesArgs contains the arguments for domRequestChildNodes.
type DOMRequestChildNodesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"`           // Id of the node to get children for.
	Depth  *int              `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool             `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMRequestChildNodesArgs) SetDepth(depth int) *DOMRequestChildNodesArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).
func (a *DOMRequestChildNodesArgs) SetPierce(pierce bool) *DOMRequestChildNodesArgs {
	a.Pierce = &pierce
	return a
}

// DOMQuerySelectorArgs contains the arguments for domQuerySelector.
type DOMQuerySelectorArgs struct {
	NodeID   cdptype.DOMNodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string            `json:"selector"` // Selector string.
}

// DOMQuerySelectorReply contains the return values for domQuerySelector.
type DOMQuerySelectorReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Query selector result.
}

// DOMQuerySelectorAllArgs contains the arguments for domQuerySelectorAll.
type DOMQuerySelectorAllArgs struct {
	NodeID   cdptype.DOMNodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string            `json:"selector"` // Selector string.
}

// DOMQuerySelectorAllReply contains the return values for domQuerySelectorAll.
type DOMQuerySelectorAllReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // Query selector result.
}

// DOMSetNodeNameArgs contains the arguments for domSetNodeName.
type DOMSetNodeNameArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to set name for.
	Name   string            `json:"name"`   // New node's name.
}

// DOMSetNodeNameReply contains the return values for domSetNodeName.
type DOMSetNodeNameReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // New node's id.
}

// DOMSetNodeValueArgs contains the arguments for domSetNodeValue.
type DOMSetNodeValueArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to set value for.
	Value  string            `json:"value"`  // New node's value.
}

// DOMRemoveNodeArgs contains the arguments for domRemoveNode.
type DOMRemoveNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to remove.
}

// DOMSetAttributeValueArgs contains the arguments for domSetAttributeValue.
type DOMSetAttributeValueArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the element to set attribute for.
	Name   string            `json:"name"`   // Attribute name.
	Value  string            `json:"value"`  // Attribute value.
}

// DOMSetAttributesAsTextArgs contains the arguments for domSetAttributesAsText.
type DOMSetAttributesAsTextArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"`         // Id of the element to set attributes for.
	Text   string            `json:"text"`           // Text with a number of attributes. Will parse this text using HTML parser.
	Name   *string           `json:"name,omitempty"` // Attribute name to replace with new attributes derived from text in case text parsed successfully.
}

// SetName sets the Name optional argument. Attribute name to replace with new attributes derived from text in case text parsed successfully.
func (a *DOMSetAttributesAsTextArgs) SetName(name string) *DOMSetAttributesAsTextArgs {
	a.Name = &name
	return a
}

// DOMRemoveAttributeArgs contains the arguments for domRemoveAttribute.
type DOMRemoveAttributeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the element to remove attribute from.
	Name   string            `json:"name"`   // Name of the attribute to remove.
}

// DOMGetOuterHTMLArgs contains the arguments for domGetOuterHTML.
type DOMGetOuterHTMLArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get markup for.
}

// DOMGetOuterHTMLReply contains the return values for domGetOuterHTML.
type DOMGetOuterHTMLReply struct {
	OuterHTML string `json:"outerHTML"` // Outer HTML markup.
}

// DOMSetOuterHTMLArgs contains the arguments for domSetOuterHTML.
type DOMSetOuterHTMLArgs struct {
	NodeID    cdptype.DOMNodeID `json:"nodeId"`    // Id of the node to set markup for.
	OuterHTML string            `json:"outerHTML"` // Outer HTML markup to set.
}

// DOMPerformSearchArgs contains the arguments for domPerformSearch.
type DOMPerformSearchArgs struct {
	Query                     string `json:"query"`                               // Plain text or query selector or XPath search query.
	IncludeUserAgentShadowDOM *bool  `json:"includeUserAgentShadowDOM,omitempty"` // True to search in user agent shadow DOM.
}

// SetIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM optional argument. True to search in user agent shadow DOM.
func (a *DOMPerformSearchArgs) SetIncludeUserAgentShadowDOM(includeUserAgentShadowDOM bool) *DOMPerformSearchArgs {
	a.IncludeUserAgentShadowDOM = &includeUserAgentShadowDOM
	return a
}

// DOMPerformSearchReply contains the return values for domPerformSearch.
type DOMPerformSearchReply struct {
	SearchID    string `json:"searchId"`    // Unique search session identifier.
	ResultCount int    `json:"resultCount"` // Number of search results.
}

// DOMGetSearchResultsArgs contains the arguments for domGetSearchResults.
type DOMGetSearchResultsArgs struct {
	SearchID  string `json:"searchId"`  // Unique search session identifier.
	FromIndex int    `json:"fromIndex"` // Start index of the search result to be returned.
	ToIndex   int    `json:"toIndex"`   // End index of the search result to be returned.
}

// DOMGetSearchResultsReply contains the return values for domGetSearchResults.
type DOMGetSearchResultsReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // Ids of the search result nodes.
}

// DOMDiscardSearchResultsArgs contains the arguments for domDiscardSearchResults.
type DOMDiscardSearchResultsArgs struct {
	SearchID string `json:"searchId"` // Unique search session identifier.
}

// DOMRequestNodeArgs contains the arguments for domRequestNode.
type DOMRequestNodeArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // JavaScript object id to convert into node.
}

// DOMRequestNodeReply contains the return values for domRequestNode.
type DOMRequestNodeReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Node id for given object.
}

// DOMSetInspectModeArgs contains the arguments for domSetInspectMode.
type DOMSetInspectModeArgs struct {
	Mode            cdptype.DOMInspectMode      `json:"mode"`                      // Set an inspection mode.
	HighlightConfig *cdptype.DOMHighlightConfig `json:"highlightConfig,omitempty"` // A descriptor for the highlight appearance of hovered-over nodes. May be omitted if enabled == false.
}

// SetHighlightConfig sets the HighlightConfig optional argument. A descriptor for the highlight appearance of hovered-over nodes. May be omitted if enabled == false.
func (a *DOMSetInspectModeArgs) SetHighlightConfig(highlightConfig cdptype.DOMHighlightConfig) *DOMSetInspectModeArgs {
	a.HighlightConfig = &highlightConfig
	return a
}

// DOMHighlightRectArgs contains the arguments for domHighlightRect.
type DOMHighlightRectArgs struct {
	X            int              `json:"x"`                      // X coordinate
	Y            int              `json:"y"`                      // Y coordinate
	Width        int              `json:"width"`                  // Rectangle width
	Height       int              `json:"height"`                 // Rectangle height
	Color        *cdptype.DOMRGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *cdptype.DOMRGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// SetColor sets the Color optional argument. The highlight fill color (default: transparent).
func (a *DOMHighlightRectArgs) SetColor(color cdptype.DOMRGBA) *DOMHighlightRectArgs {
	a.Color = &color
	return a
}

// SetOutlineColor sets the OutlineColor optional argument. The highlight outline color (default: transparent).
func (a *DOMHighlightRectArgs) SetOutlineColor(outlineColor cdptype.DOMRGBA) *DOMHighlightRectArgs {
	a.OutlineColor = &outlineColor
	return a
}

// DOMHighlightQuadArgs contains the arguments for domHighlightQuad.
type DOMHighlightQuadArgs struct {
	Quad         cdptype.DOMQuad  `json:"quad"`                   // Quad to highlight
	Color        *cdptype.DOMRGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *cdptype.DOMRGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// SetColor sets the Color optional argument. The highlight fill color (default: transparent).
func (a *DOMHighlightQuadArgs) SetColor(color cdptype.DOMRGBA) *DOMHighlightQuadArgs {
	a.Color = &color
	return a
}

// SetOutlineColor sets the OutlineColor optional argument. The highlight outline color (default: transparent).
func (a *DOMHighlightQuadArgs) SetOutlineColor(outlineColor cdptype.DOMRGBA) *DOMHighlightQuadArgs {
	a.OutlineColor = &outlineColor
	return a
}

// DOMHighlightNodeArgs contains the arguments for domHighlightNode.
type DOMHighlightNodeArgs struct {
	HighlightConfig cdptype.DOMHighlightConfig     `json:"highlightConfig"`         // A descriptor for the highlight appearance.
	NodeID          *cdptype.DOMNodeID             `json:"nodeId,omitempty"`        // Identifier of the node to highlight.
	BackendNodeID   *cdptype.DOMBackendNodeID      `json:"backendNodeId,omitempty"` // Identifier of the backend node to highlight.
	ObjectID        *cdptype.RuntimeRemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node to be highlighted.
}

// SetNodeID sets the NodeID optional argument. Identifier of the node to highlight.
func (a *DOMHighlightNodeArgs) SetNodeID(nodeID cdptype.DOMNodeID) *DOMHighlightNodeArgs {
	a.NodeID = &nodeID
	return a
}

// SetBackendNodeID sets the BackendNodeID optional argument. Identifier of the backend node to highlight.
func (a *DOMHighlightNodeArgs) SetBackendNodeID(backendNodeID cdptype.DOMBackendNodeID) *DOMHighlightNodeArgs {
	a.BackendNodeID = &backendNodeID
	return a
}

// SetObjectID sets the ObjectID optional argument. JavaScript object id of the node to be highlighted.
func (a *DOMHighlightNodeArgs) SetObjectID(objectID cdptype.RuntimeRemoteObjectID) *DOMHighlightNodeArgs {
	a.ObjectID = &objectID
	return a
}

// DOMHighlightFrameArgs contains the arguments for domHighlightFrame.
type DOMHighlightFrameArgs struct {
	FrameID             cdptype.PageFrameID `json:"frameId"`                       // Identifier of the frame to highlight.
	ContentColor        *cdptype.DOMRGBA    `json:"contentColor,omitempty"`        // The content box highlight fill color (default: transparent).
	ContentOutlineColor *cdptype.DOMRGBA    `json:"contentOutlineColor,omitempty"` // The content box highlight outline color (default: transparent).
}

// SetContentColor sets the ContentColor optional argument. The content box highlight fill color (default: transparent).
func (a *DOMHighlightFrameArgs) SetContentColor(contentColor cdptype.DOMRGBA) *DOMHighlightFrameArgs {
	a.ContentColor = &contentColor
	return a
}

// SetContentOutlineColor sets the ContentOutlineColor optional argument. The content box highlight outline color (default: transparent).
func (a *DOMHighlightFrameArgs) SetContentOutlineColor(contentOutlineColor cdptype.DOMRGBA) *DOMHighlightFrameArgs {
	a.ContentOutlineColor = &contentOutlineColor
	return a
}

// DOMPushNodeByPathToFrontendArgs contains the arguments for domPushNodeByPathToFrontend.
type DOMPushNodeByPathToFrontendArgs struct {
	Path string `json:"path"` // Path to node in the proprietary format.
}

// DOMPushNodeByPathToFrontendReply contains the return values for domPushNodeByPathToFrontend.
type DOMPushNodeByPathToFrontendReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node for given path.
}

// DOMPushNodesByBackendIdsToFrontendArgs contains the arguments for domPushNodesByBackendIdsToFrontend.
type DOMPushNodesByBackendIdsToFrontendArgs struct {
	BackendNodeIDs []cdptype.DOMBackendNodeID `json:"backendNodeIds"` // The array of backend node ids.
}

// DOMPushNodesByBackendIdsToFrontendReply contains the return values for domPushNodesByBackendIdsToFrontend.
type DOMPushNodesByBackendIdsToFrontendReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.
}

// DOMSetInspectedNodeArgs contains the arguments for domSetInspectedNode.
type DOMSetInspectedNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // DOM node id to be accessible by means of $x command line API.
}

// DOMResolveNodeArgs contains the arguments for domResolveNode.
type DOMResolveNodeArgs struct {
	NodeID      cdptype.DOMNodeID `json:"nodeId"`                // Id of the node to resolve.
	ObjectGroup *string           `json:"objectGroup,omitempty"` // Symbolic group name that can be used to release multiple objects.
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *DOMResolveNodeArgs) SetObjectGroup(objectGroup string) *DOMResolveNodeArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// DOMResolveNodeReply contains the return values for domResolveNode.
type DOMResolveNodeReply struct {
	Object cdptype.RuntimeRemoteObject `json:"object"` // JavaScript object wrapper for given node.
}

// DOMGetAttributesArgs contains the arguments for domGetAttributes.
type DOMGetAttributesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to retrieve attibutes for.
}

// DOMGetAttributesReply contains the return values for domGetAttributes.
type DOMGetAttributesReply struct {
	Attributes []string `json:"attributes"` // An interleaved array of node attribute names and values.
}

// DOMCopyToArgs contains the arguments for domCopyTo.
type DOMCopyToArgs struct {
	NodeID             cdptype.DOMNodeID  `json:"nodeId"`                       // Id of the node to copy.
	TargetNodeID       cdptype.DOMNodeID  `json:"targetNodeId"`                 // Id of the element to drop the copy into.
	InsertBeforeNodeID *cdptype.DOMNodeID `json:"insertBeforeNodeId,omitempty"` // Drop the copy before this node (if absent, the copy becomes the last child of targetNodeId).
}

// SetInsertBeforeNodeID sets the InsertBeforeNodeID optional argument. Drop the copy before this node (if absent, the copy becomes the last child of targetNodeId).
func (a *DOMCopyToArgs) SetInsertBeforeNodeID(insertBeforeNodeID cdptype.DOMNodeID) *DOMCopyToArgs {
	a.InsertBeforeNodeID = &insertBeforeNodeID
	return a
}

// DOMCopyToReply contains the return values for domCopyTo.
type DOMCopyToReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node clone.
}

// DOMMoveToArgs contains the arguments for domMoveTo.
type DOMMoveToArgs struct {
	NodeID             cdptype.DOMNodeID  `json:"nodeId"`                       // Id of the node to move.
	TargetNodeID       cdptype.DOMNodeID  `json:"targetNodeId"`                 // Id of the element to drop the moved node into.
	InsertBeforeNodeID *cdptype.DOMNodeID `json:"insertBeforeNodeId,omitempty"` // Drop node before this one (if absent, the moved node becomes the last child of targetNodeId).
}

// SetInsertBeforeNodeID sets the InsertBeforeNodeID optional argument. Drop node before this one (if absent, the moved node becomes the last child of targetNodeId).
func (a *DOMMoveToArgs) SetInsertBeforeNodeID(insertBeforeNodeID cdptype.DOMNodeID) *DOMMoveToArgs {
	a.InsertBeforeNodeID = &insertBeforeNodeID
	return a
}

// DOMMoveToReply contains the return values for domMoveTo.
type DOMMoveToReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // New id of the moved node.
}

// DOMFocusArgs contains the arguments for domFocus.
type DOMFocusArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to focus.
}

// DOMSetFileInputFilesArgs contains the arguments for domSetFileInputFiles.
type DOMSetFileInputFilesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the file input node to set files for.
	Files  []string          `json:"files"`  // Array of file paths to set.
}

// DOMGetBoxModelArgs contains the arguments for domGetBoxModel.
type DOMGetBoxModelArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get box model for.
}

// DOMGetBoxModelReply contains the return values for domGetBoxModel.
type DOMGetBoxModelReply struct {
	Model cdptype.DOMBoxModel `json:"model"` // Box model for the node.
}

// DOMGetNodeForLocationArgs contains the arguments for domGetNodeForLocation.
type DOMGetNodeForLocationArgs struct {
	X int `json:"x"` // X coordinate.
	Y int `json:"y"` // Y coordinate.
}

// DOMGetNodeForLocationReply contains the return values for domGetNodeForLocation.
type DOMGetNodeForLocationReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node at given coordinates.
}

// DOMGetRelayoutBoundaryArgs contains the arguments for domGetRelayoutBoundary.
type DOMGetRelayoutBoundaryArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node.
}

// DOMGetRelayoutBoundaryReply contains the return values for domGetRelayoutBoundary.
type DOMGetRelayoutBoundaryReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Relayout boundary node id for the given node.
}

// DOMGetHighlightObjectForTestArgs contains the arguments for domGetHighlightObjectForTest.
type DOMGetHighlightObjectForTestArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get highlight object for.
}

// DOMGetHighlightObjectForTestReply contains the return values for domGetHighlightObjectForTest.
type DOMGetHighlightObjectForTestReply struct {
	Highlight json.RawMessage `json:"highlight"` // Highlight data for the node.
}

// DOMDebuggerSetDOMBreakpointArgs contains the arguments for domdebuggerSetDOMBreakpoint.
type DOMDebuggerSetDOMBreakpointArgs struct {
	NodeID cdptype.DOMNodeID                    `json:"nodeId"` // Identifier of the node to set breakpoint on.
	Type   cdptype.DOMDebuggerDOMBreakpointType `json:"type"`   // Type of the operation to stop upon.
}

// DOMDebuggerRemoveDOMBreakpointArgs contains the arguments for domdebuggerRemoveDOMBreakpoint.
type DOMDebuggerRemoveDOMBreakpointArgs struct {
	NodeID cdptype.DOMNodeID                    `json:"nodeId"` // Identifier of the node to remove breakpoint from.
	Type   cdptype.DOMDebuggerDOMBreakpointType `json:"type"`   // Type of the breakpoint to remove.
}

// DOMDebuggerSetEventListenerBreakpointArgs contains the arguments for domdebuggerSetEventListenerBreakpoint.
type DOMDebuggerSetEventListenerBreakpointArgs struct {
	EventName  string  `json:"eventName"`            // DOM Event name to stop on (any DOM event will do).
	TargetName *string `json:"targetName,omitempty"` // EventTarget interface name to stop on. If equal to "*" or not provided, will stop on any EventTarget.
}

// SetTargetName sets the TargetName optional argument. EventTarget interface name to stop on. If equal to "*" or not provided, will stop on any EventTarget.
func (a *DOMDebuggerSetEventListenerBreakpointArgs) SetTargetName(targetName string) *DOMDebuggerSetEventListenerBreakpointArgs {
	a.TargetName = &targetName
	return a
}

// DOMDebuggerRemoveEventListenerBreakpointArgs contains the arguments for domdebuggerRemoveEventListenerBreakpoint.
type DOMDebuggerRemoveEventListenerBreakpointArgs struct {
	EventName  string  `json:"eventName"`            // Event name.
	TargetName *string `json:"targetName,omitempty"` // EventTarget interface name.
}

// SetTargetName sets the TargetName optional argument. EventTarget interface name.
func (a *DOMDebuggerRemoveEventListenerBreakpointArgs) SetTargetName(targetName string) *DOMDebuggerRemoveEventListenerBreakpointArgs {
	a.TargetName = &targetName
	return a
}

// DOMDebuggerSetInstrumentationBreakpointArgs contains the arguments for domdebuggerSetInstrumentationBreakpoint.
type DOMDebuggerSetInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// DOMDebuggerRemoveInstrumentationBreakpointArgs contains the arguments for domdebuggerRemoveInstrumentationBreakpoint.
type DOMDebuggerRemoveInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// DOMDebuggerSetXHRBreakpointArgs contains the arguments for domdebuggerSetXHRBreakpoint.
type DOMDebuggerSetXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
}

// DOMDebuggerRemoveXHRBreakpointArgs contains the arguments for domdebuggerRemoveXHRBreakpoint.
type DOMDebuggerRemoveXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring.
}

// DOMDebuggerGetEventListenersArgs contains the arguments for domdebuggerGetEventListeners.
type DOMDebuggerGetEventListenersArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"`         // Identifier of the object to return listeners for.
	Depth    *int                          `json:"depth,omitempty"`  // The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce   *bool                         `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.
}

// SetDepth sets the Depth optional argument. The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMDebuggerGetEventListenersArgs) SetDepth(depth int) *DOMDebuggerGetEventListenersArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.
func (a *DOMDebuggerGetEventListenersArgs) SetPierce(pierce bool) *DOMDebuggerGetEventListenersArgs {
	a.Pierce = &pierce
	return a
}

// DOMDebuggerGetEventListenersReply contains the return values for domdebuggerGetEventListeners.
type DOMDebuggerGetEventListenersReply struct {
	Listeners []cdptype.DOMDebuggerEventListener `json:"listeners"` // Array of relevant listeners.
}

// DOMStorageClearArgs contains the arguments for domstorageClear.
type DOMStorageClearArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
}

// DOMStorageGetDOMStorageItemsArgs contains the arguments for domstorageGetDOMStorageItems.
type DOMStorageGetDOMStorageItemsArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
}

// DOMStorageGetDOMStorageItemsReply contains the return values for domstorageGetDOMStorageItems.
type DOMStorageGetDOMStorageItemsReply struct {
	Entries []cdptype.DOMStorageItem `json:"entries"` //
}

// DOMStorageSetDOMStorageItemArgs contains the arguments for domstorageSetDOMStorageItem.
type DOMStorageSetDOMStorageItemArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
	Value     string                      `json:"value"`     //
}

// DOMStorageRemoveDOMStorageItemArgs contains the arguments for domstorageRemoveDOMStorageItem.
type DOMStorageRemoveDOMStorageItemArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
}

// DatabaseGetDatabaseTableNamesArgs contains the arguments for databaseGetDatabaseTableNames.
type DatabaseGetDatabaseTableNamesArgs struct {
	DatabaseID cdptype.DatabaseID `json:"databaseId"` //
}

// DatabaseGetDatabaseTableNamesReply contains the return values for databaseGetDatabaseTableNames.
type DatabaseGetDatabaseTableNamesReply struct {
	TableNames []string `json:"tableNames"` //
}

// DatabaseExecuteSQLArgs contains the arguments for databaseExecuteSQL.
type DatabaseExecuteSQLArgs struct {
	DatabaseID cdptype.DatabaseID `json:"databaseId"` //
	Query      string             `json:"query"`      //
}

// DatabaseExecuteSQLReply contains the return values for databaseExecuteSQL.
type DatabaseExecuteSQLReply struct {
	ColumnNames []string               `json:"columnNames,omitempty"` //
	Values      []json.RawMessage      `json:"values,omitempty"`      //
	SQLError    *cdptype.DatabaseError `json:"sqlError,omitempty"`    //
}

// DebuggerSetBreakpointsActiveArgs contains the arguments for debuggerSetBreakpointsActive.
type DebuggerSetBreakpointsActiveArgs struct {
	Active bool `json:"active"` // New value for breakpoints active state.
}

// DebuggerSetSkipAllPausesArgs contains the arguments for debuggerSetSkipAllPauses.
type DebuggerSetSkipAllPausesArgs struct {
	Skip bool `json:"skip"` // New value for skip pauses state.
}

// DebuggerSetBreakpointByURLArgs contains the arguments for debuggerSetBreakpointByURL.
type DebuggerSetBreakpointByURLArgs struct {
	LineNumber   int     `json:"lineNumber"`             // Line number to set breakpoint at.
	URL          *string `json:"url,omitempty"`          // URL of the resources to set breakpoint on.
	URLRegex     *string `json:"urlRegex,omitempty"`     // Regex pattern for the URLs of the resources to set breakpoints on. Either url or urlRegex must be specified.
	ColumnNumber *int    `json:"columnNumber,omitempty"` // Offset in the line to set breakpoint at.
	Condition    *string `json:"condition,omitempty"`    // Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
}

// SetURL sets the URL optional argument. URL of the resources to set breakpoint on.
func (a *DebuggerSetBreakpointByURLArgs) SetURL(url string) *DebuggerSetBreakpointByURLArgs {
	a.URL = &url
	return a
}

// SetURLRegex sets the URLRegex optional argument. Regex pattern for the URLs of the resources to set breakpoints on. Either url or urlRegex must be specified.
func (a *DebuggerSetBreakpointByURLArgs) SetURLRegex(urlRegex string) *DebuggerSetBreakpointByURLArgs {
	a.URLRegex = &urlRegex
	return a
}

// SetColumnNumber sets the ColumnNumber optional argument. Offset in the line to set breakpoint at.
func (a *DebuggerSetBreakpointByURLArgs) SetColumnNumber(columnNumber int) *DebuggerSetBreakpointByURLArgs {
	a.ColumnNumber = &columnNumber
	return a
}

// SetCondition sets the Condition optional argument. Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
func (a *DebuggerSetBreakpointByURLArgs) SetCondition(condition string) *DebuggerSetBreakpointByURLArgs {
	a.Condition = &condition
	return a
}

// DebuggerSetBreakpointByURLReply contains the return values for debuggerSetBreakpointByURL.
type DebuggerSetBreakpointByURLReply struct {
	BreakpointID cdptype.DebuggerBreakpointID `json:"breakpointId"` // Id of the created breakpoint for further reference.
	Locations    []cdptype.DebuggerLocation   `json:"locations"`    // List of the locations this breakpoint resolved into upon addition.
}

// DebuggerSetBreakpointArgs contains the arguments for debuggerSetBreakpoint.
type DebuggerSetBreakpointArgs struct {
	Location  cdptype.DebuggerLocation `json:"location"`            // Location to set breakpoint in.
	Condition *string                  `json:"condition,omitempty"` // Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
}

// SetCondition sets the Condition optional argument. Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
func (a *DebuggerSetBreakpointArgs) SetCondition(condition string) *DebuggerSetBreakpointArgs {
	a.Condition = &condition
	return a
}

// DebuggerSetBreakpointReply contains the return values for debuggerSetBreakpoint.
type DebuggerSetBreakpointReply struct {
	BreakpointID   cdptype.DebuggerBreakpointID `json:"breakpointId"`   // Id of the created breakpoint for further reference.
	ActualLocation cdptype.DebuggerLocation     `json:"actualLocation"` // Location this breakpoint resolved into.
}

// DebuggerRemoveBreakpointArgs contains the arguments for debuggerRemoveBreakpoint.
type DebuggerRemoveBreakpointArgs struct {
	BreakpointID cdptype.DebuggerBreakpointID `json:"breakpointId"` //
}

// DebuggerGetPossibleBreakpointsArgs contains the arguments for debuggerGetPossibleBreakpoints.
type DebuggerGetPossibleBreakpointsArgs struct {
	Start              cdptype.DebuggerLocation  `json:"start"`                        // Start of range to search possible breakpoint locations in.
	End                *cdptype.DebuggerLocation `json:"end,omitempty"`                // End of range to search possible breakpoint locations in (excluding). When not specifed, end of scripts is used as end of range.
	RestrictToFunction *bool                     `json:"restrictToFunction,omitempty"` // Only consider locations which are in the same (non-nested) function as start.
}

// SetEnd sets the End optional argument. End of range to search possible breakpoint locations in (excluding). When not specifed, end of scripts is used as end of range.
func (a *DebuggerGetPossibleBreakpointsArgs) SetEnd(end cdptype.DebuggerLocation) *DebuggerGetPossibleBreakpointsArgs {
	a.End = &end
	return a
}

// SetRestrictToFunction sets the RestrictToFunction optional argument. Only consider locations which are in the same (non-nested) function as start.
func (a *DebuggerGetPossibleBreakpointsArgs) SetRestrictToFunction(restrictToFunction bool) *DebuggerGetPossibleBreakpointsArgs {
	a.RestrictToFunction = &restrictToFunction
	return a
}

// DebuggerGetPossibleBreakpointsReply contains the return values for debuggerGetPossibleBreakpoints.
type DebuggerGetPossibleBreakpointsReply struct {
	Locations []cdptype.DebuggerBreakLocation `json:"locations"` // List of the possible breakpoint locations.
}

// DebuggerContinueToLocationArgs contains the arguments for debuggerContinueToLocation.
type DebuggerContinueToLocationArgs struct {
	Location cdptype.DebuggerLocation `json:"location"` // Location to continue to.
}

// DebuggerSearchInContentArgs contains the arguments for debuggerSearchInContent.
type DebuggerSearchInContentArgs struct {
	ScriptID      cdptype.RuntimeScriptID `json:"scriptId"`                // Id of the script to search in.
	Query         string                  `json:"query"`                   // String to search for.
	CaseSensitive *bool                   `json:"caseSensitive,omitempty"` // If true, search is case sensitive.
	IsRegex       *bool                   `json:"isRegex,omitempty"`       // If true, treats string parameter as regex.
}

// SetCaseSensitive sets the CaseSensitive optional argument. If true, search is case sensitive.
func (a *DebuggerSearchInContentArgs) SetCaseSensitive(caseSensitive bool) *DebuggerSearchInContentArgs {
	a.CaseSensitive = &caseSensitive
	return a
}

// SetIsRegex sets the IsRegex optional argument. If true, treats string parameter as regex.
func (a *DebuggerSearchInContentArgs) SetIsRegex(isRegex bool) *DebuggerSearchInContentArgs {
	a.IsRegex = &isRegex
	return a
}

// DebuggerSearchInContentReply contains the return values for debuggerSearchInContent.
type DebuggerSearchInContentReply struct {
	Result []cdptype.DebuggerSearchMatch `json:"result"` // List of search matches.
}

// DebuggerSetScriptSourceArgs contains the arguments for debuggerSetScriptSource.
type DebuggerSetScriptSourceArgs struct {
	ScriptID     cdptype.RuntimeScriptID `json:"scriptId"`         // Id of the script to edit.
	ScriptSource string                  `json:"scriptSource"`     // New content of the script.
	DryRun       *bool                   `json:"dryRun,omitempty"` //  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.
}

// SetDryRun sets the DryRun optional argument.  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.
func (a *DebuggerSetScriptSourceArgs) SetDryRun(dryRun bool) *DebuggerSetScriptSourceArgs {
	a.DryRun = &dryRun
	return a
}

// DebuggerSetScriptSourceReply contains the return values for debuggerSetScriptSource.
type DebuggerSetScriptSourceReply struct {
	CallFrames       []cdptype.DebuggerCallFrame      `json:"callFrames,omitempty"`       // New stack trace in case editing has happened while VM was stopped.
	StackChanged     *bool                            `json:"stackChanged,omitempty"`     // Whether current call stack  was modified after applying the changes.
	AsyncStackTrace  *cdptype.RuntimeStackTrace       `json:"asyncStackTrace,omitempty"`  // Async stack trace, if any.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details if any.
}

// DebuggerRestartFrameArgs contains the arguments for debuggerRestartFrame.
type DebuggerRestartFrameArgs struct {
	CallFrameID cdptype.DebuggerCallFrameID `json:"callFrameId"` // Call frame identifier to evaluate on.
}

// DebuggerRestartFrameReply contains the return values for debuggerRestartFrame.
type DebuggerRestartFrameReply struct {
	CallFrames      []cdptype.DebuggerCallFrame `json:"callFrames"`                // New stack trace.
	AsyncStackTrace *cdptype.RuntimeStackTrace  `json:"asyncStackTrace,omitempty"` // Async stack trace, if any.
}

// DebuggerGetScriptSourceArgs contains the arguments for debuggerGetScriptSource.
type DebuggerGetScriptSourceArgs struct {
	ScriptID cdptype.RuntimeScriptID `json:"scriptId"` // Id of the script to get source for.
}

// DebuggerGetScriptSourceReply contains the return values for debuggerGetScriptSource.
type DebuggerGetScriptSourceReply struct {
	ScriptSource string `json:"scriptSource"` // Script source.
}

// DebuggerSetPauseOnExceptionsArgs contains the arguments for debuggerSetPauseOnExceptions.
type DebuggerSetPauseOnExceptionsArgs struct {
	State string `json:"state"` // Pause on exceptions mode.
}

// DebuggerEvaluateOnCallFrameArgs contains the arguments for debuggerEvaluateOnCallFrame.
type DebuggerEvaluateOnCallFrameArgs struct {
	CallFrameID           cdptype.DebuggerCallFrameID `json:"callFrameId"`                     // Call frame identifier to evaluate on.
	Expression            string                      `json:"expression"`                      // Expression to evaluate.
	ObjectGroup           *string                     `json:"objectGroup,omitempty"`           // String object group name to put result into (allows rapid releasing resulting object handles using releaseObjectGroup).
	IncludeCommandLineAPI *bool                       `json:"includeCommandLineAPI,omitempty"` // Specifies whether command line API should be available to the evaluated expression, defaults to false.
	Silent                *bool                       `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ReturnByValue         *bool                       `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview       *bool                       `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	ThrowOnSideEffect     *bool                       `json:"throwOnSideEffect,omitempty"`     // Whether to throw an exception if side effect cannot be ruled out during evaluation.
}

// SetObjectGroup sets the ObjectGroup optional argument. String object group name to put result into (allows rapid releasing resulting object handles using releaseObjectGroup).
func (a *DebuggerEvaluateOnCallFrameArgs) SetObjectGroup(objectGroup string) *DebuggerEvaluateOnCallFrameArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Specifies whether command line API should be available to the evaluated expression, defaults to false.
func (a *DebuggerEvaluateOnCallFrameArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *DebuggerEvaluateOnCallFrameArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *DebuggerEvaluateOnCallFrameArgs) SetSilent(silent bool) *DebuggerEvaluateOnCallFrameArgs {
	a.Silent = &silent
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *DebuggerEvaluateOnCallFrameArgs) SetReturnByValue(returnByValue bool) *DebuggerEvaluateOnCallFrameArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *DebuggerEvaluateOnCallFrameArgs) SetGeneratePreview(generatePreview bool) *DebuggerEvaluateOnCallFrameArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetThrowOnSideEffect sets the ThrowOnSideEffect optional argument. Whether to throw an exception if side effect cannot be ruled out during evaluation.
func (a *DebuggerEvaluateOnCallFrameArgs) SetThrowOnSideEffect(throwOnSideEffect bool) *DebuggerEvaluateOnCallFrameArgs {
	a.ThrowOnSideEffect = &throwOnSideEffect
	return a
}

// DebuggerEvaluateOnCallFrameReply contains the return values for debuggerEvaluateOnCallFrame.
type DebuggerEvaluateOnCallFrameReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Object wrapper for the evaluation result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// DebuggerSetVariableValueArgs contains the arguments for debuggerSetVariableValue.
type DebuggerSetVariableValueArgs struct {
	ScopeNumber  int                         `json:"scopeNumber"`  // 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.
	VariableName string                      `json:"variableName"` // Variable name.
	NewValue     cdptype.RuntimeCallArgument `json:"newValue"`     // New variable value.
	CallFrameID  cdptype.DebuggerCallFrameID `json:"callFrameId"`  // Id of callframe that holds variable.
}

// DebuggerSetAsyncCallStackDepthArgs contains the arguments for debuggerSetAsyncCallStackDepth.
type DebuggerSetAsyncCallStackDepthArgs struct {
	MaxDepth int `json:"maxDepth"` // Maximum depth of async call stacks. Setting to 0 will effectively disable collecting async call stacks (default).
}

// DebuggerSetBlackboxPatternsArgs contains the arguments for debuggerSetBlackboxPatterns.
type DebuggerSetBlackboxPatternsArgs struct {
	Patterns []string `json:"patterns"` // Array of regexps that will be used to check script url for blackbox state.
}

// DebuggerSetBlackboxedRangesArgs contains the arguments for debuggerSetBlackboxedRanges.
type DebuggerSetBlackboxedRangesArgs struct {
	ScriptID  cdptype.RuntimeScriptID          `json:"scriptId"`  // Id of the script.
	Positions []cdptype.DebuggerScriptPosition `json:"positions"` //
}

// DeviceOrientationSetDeviceOrientationOverrideArgs contains the arguments for deviceorientationSetDeviceOrientationOverride.
type DeviceOrientationSetDeviceOrientationOverrideArgs struct {
	Alpha float64 `json:"alpha"` // Mock alpha
	Beta  float64 `json:"beta"`  // Mock beta
	Gamma float64 `json:"gamma"` // Mock gamma
}

// EmulationSetDeviceMetricsOverrideArgs contains the arguments for emulationSetDeviceMetricsOverride.
type EmulationSetDeviceMetricsOverrideArgs struct {
	Width             int                                 `json:"width"`                       // Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height            int                                 `json:"height"`                      // Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	DeviceScaleFactor float64                             `json:"deviceScaleFactor"`           // Overriding device scale factor value. 0 disables the override.
	Mobile            bool                                `json:"mobile"`                      // Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
	FitWindow         bool                                `json:"fitWindow"`                   // Whether a view that exceeds the available browser window area should be scaled down to fit.
	Scale             *float64                            `json:"scale,omitempty"`             // Scale to apply to resulting view image. Ignored in |fitWindow| mode.
	OffsetX           *float64                            `json:"offsetX,omitempty"`           // Not used.
	OffsetY           *float64                            `json:"offsetY,omitempty"`           // Not used.
	ScreenWidth       *int                                `json:"screenWidth,omitempty"`       // Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenHeight      *int                                `json:"screenHeight,omitempty"`      // Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionX         *int                                `json:"positionX,omitempty"`         // Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionY         *int                                `json:"positionY,omitempty"`         // Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenOrientation *cdptype.EmulationScreenOrientation `json:"screenOrientation,omitempty"` // Screen orientation override.
}

// SetScale sets the Scale optional argument. Scale to apply to resulting view image. Ignored in |fitWindow| mode.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScale(scale float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.Scale = &scale
	return a
}

// SetOffsetX sets the OffsetX optional argument. Not used.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetOffsetX(offsetX float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.OffsetX = &offsetX
	return a
}

// SetOffsetY sets the OffsetY optional argument. Not used.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetOffsetY(offsetY float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.OffsetY = &offsetY
	return a
}

// SetScreenWidth sets the ScreenWidth optional argument. Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenWidth(screenWidth int) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenWidth = &screenWidth
	return a
}

// SetScreenHeight sets the ScreenHeight optional argument. Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenHeight(screenHeight int) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenHeight = &screenHeight
	return a
}

// SetPositionX sets the PositionX optional argument. Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetPositionX(positionX int) *EmulationSetDeviceMetricsOverrideArgs {
	a.PositionX = &positionX
	return a
}

// SetPositionY sets the PositionY optional argument. Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetPositionY(positionY int) *EmulationSetDeviceMetricsOverrideArgs {
	a.PositionY = &positionY
	return a
}

// SetScreenOrientation sets the ScreenOrientation optional argument. Screen orientation override.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenOrientation(screenOrientation cdptype.EmulationScreenOrientation) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenOrientation = &screenOrientation
	return a
}

// EmulationForceViewportArgs contains the arguments for emulationForceViewport.
type EmulationForceViewportArgs struct {
	X     float64 `json:"x"`     // X coordinate of top-left corner of the area (CSS pixels).
	Y     float64 `json:"y"`     // Y coordinate of top-left corner of the area (CSS pixels).
	Scale float64 `json:"scale"` // Scale to apply to the area (relative to a page scale of 1.0).
}

// EmulationSetPageScaleFactorArgs contains the arguments for emulationSetPageScaleFactor.
type EmulationSetPageScaleFactorArgs struct {
	PageScaleFactor float64 `json:"pageScaleFactor"` // Page scale factor.
}

// EmulationSetVisibleSizeArgs contains the arguments for emulationSetVisibleSize.
type EmulationSetVisibleSizeArgs struct {
	Width  int `json:"width"`  // Frame width (DIP).
	Height int `json:"height"` // Frame height (DIP).
}

// EmulationSetScriptExecutionDisabledArgs contains the arguments for emulationSetScriptExecutionDisabled.
type EmulationSetScriptExecutionDisabledArgs struct {
	Value bool `json:"value"` // Whether script execution should be disabled in the page.
}

// EmulationSetGeolocationOverrideArgs contains the arguments for emulationSetGeolocationOverride.
type EmulationSetGeolocationOverrideArgs struct {
	Latitude  *float64 `json:"latitude,omitempty"`  // Mock latitude
	Longitude *float64 `json:"longitude,omitempty"` // Mock longitude
	Accuracy  *float64 `json:"accuracy,omitempty"`  // Mock accuracy
}

// SetLatitude sets the Latitude optional argument. Mock latitude
func (a *EmulationSetGeolocationOverrideArgs) SetLatitude(latitude float64) *EmulationSetGeolocationOverrideArgs {
	a.Latitude = &latitude
	return a
}

// SetLongitude sets the Longitude optional argument. Mock longitude
func (a *EmulationSetGeolocationOverrideArgs) SetLongitude(longitude float64) *EmulationSetGeolocationOverrideArgs {
	a.Longitude = &longitude
	return a
}

// SetAccuracy sets the Accuracy optional argument. Mock accuracy
func (a *EmulationSetGeolocationOverrideArgs) SetAccuracy(accuracy float64) *EmulationSetGeolocationOverrideArgs {
	a.Accuracy = &accuracy
	return a
}

// EmulationSetTouchEmulationEnabledArgs contains the arguments for emulationSetTouchEmulationEnabled.
type EmulationSetTouchEmulationEnabledArgs struct {
	Enabled       bool    `json:"enabled"`                 // Whether the touch event emulation should be enabled.
	Configuration *string `json:"configuration,omitempty"` // Touch/gesture events configuration. Default: current platform.
}

// SetConfiguration sets the Configuration optional argument. Touch/gesture events configuration. Default: current platform.
func (a *EmulationSetTouchEmulationEnabledArgs) SetConfiguration(configuration string) *EmulationSetTouchEmulationEnabledArgs {
	a.Configuration = &configuration
	return a
}

// EmulationSetEmulatedMediaArgs contains the arguments for emulationSetEmulatedMedia.
type EmulationSetEmulatedMediaArgs struct {
	Media string `json:"media"` // Media type to emulate. Empty string disables the override.
}

// EmulationSetCPUThrottlingRateArgs contains the arguments for emulationSetCPUThrottlingRate.
type EmulationSetCPUThrottlingRateArgs struct {
	Rate float64 `json:"rate"` // Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
}

// EmulationCanEmulateReply contains the return values for emulationCanEmulate.
type EmulationCanEmulateReply struct {
	Result bool `json:"result"` // True if emulation is supported.
}

// EmulationSetVirtualTimePolicyArgs contains the arguments for emulationSetVirtualTimePolicy.
type EmulationSetVirtualTimePolicyArgs struct {
	Policy cdptype.EmulationVirtualTimePolicy `json:"policy"`           //
	Budget *int                               `json:"budget,omitempty"` // If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
}

// SetBudget sets the Budget optional argument. If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
func (a *EmulationSetVirtualTimePolicyArgs) SetBudget(budget int) *EmulationSetVirtualTimePolicyArgs {
	a.Budget = &budget
	return a
}

// EmulationSetDefaultBackgroundColorOverrideArgs contains the arguments for emulationSetDefaultBackgroundColorOverride.
type EmulationSetDefaultBackgroundColorOverrideArgs struct {
	Color *cdptype.DOMRGBA `json:"color,omitempty"` // RGBA of the default background color. If not specified, any existing override will be cleared.
}

// SetColor sets the Color optional argument. RGBA of the default background color. If not specified, any existing override will be cleared.
func (a *EmulationSetDefaultBackgroundColorOverrideArgs) SetColor(color cdptype.DOMRGBA) *EmulationSetDefaultBackgroundColorOverrideArgs {
	a.Color = &color
	return a
}

// HeapProfilerStartTrackingHeapObjectsArgs contains the arguments for heapprofilerStartTrackingHeapObjects.
type HeapProfilerStartTrackingHeapObjectsArgs struct {
	TrackAllocations *bool `json:"trackAllocations,omitempty"` //
}

// SetTrackAllocations sets the TrackAllocations optional argument.
func (a *HeapProfilerStartTrackingHeapObjectsArgs) SetTrackAllocations(trackAllocations bool) *HeapProfilerStartTrackingHeapObjectsArgs {
	a.TrackAllocations = &trackAllocations
	return a
}

// HeapProfilerStopTrackingHeapObjectsArgs contains the arguments for heapprofilerStopTrackingHeapObjects.
type HeapProfilerStopTrackingHeapObjectsArgs struct {
	ReportProgress *bool `json:"reportProgress,omitempty"` // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
}

// SetReportProgress sets the ReportProgress optional argument. If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
func (a *HeapProfilerStopTrackingHeapObjectsArgs) SetReportProgress(reportProgress bool) *HeapProfilerStopTrackingHeapObjectsArgs {
	a.ReportProgress = &reportProgress
	return a
}

// HeapProfilerTakeHeapSnapshotArgs contains the arguments for heapprofilerTakeHeapSnapshot.
type HeapProfilerTakeHeapSnapshotArgs struct {
	ReportProgress *bool `json:"reportProgress,omitempty"` // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
}

// SetReportProgress sets the ReportProgress optional argument. If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
func (a *HeapProfilerTakeHeapSnapshotArgs) SetReportProgress(reportProgress bool) *HeapProfilerTakeHeapSnapshotArgs {
	a.ReportProgress = &reportProgress
	return a
}

// HeapProfilerGetObjectByHeapObjectIDArgs contains the arguments for heapprofilerGetObjectByHeapObjectID.
type HeapProfilerGetObjectByHeapObjectIDArgs struct {
	ObjectID    cdptype.HeapProfilerHeapSnapshotObjectID `json:"objectId"`              //
	ObjectGroup *string                                  `json:"objectGroup,omitempty"` // Symbolic group name that can be used to release multiple objects.
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *HeapProfilerGetObjectByHeapObjectIDArgs) SetObjectGroup(objectGroup string) *HeapProfilerGetObjectByHeapObjectIDArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// HeapProfilerGetObjectByHeapObjectIDReply contains the return values for heapprofilerGetObjectByHeapObjectID.
type HeapProfilerGetObjectByHeapObjectIDReply struct {
	Result cdptype.RuntimeRemoteObject `json:"result"` // Evaluation result.
}

// HeapProfilerAddInspectedHeapObjectArgs contains the arguments for heapprofilerAddInspectedHeapObject.
type HeapProfilerAddInspectedHeapObjectArgs struct {
	HeapObjectID cdptype.HeapProfilerHeapSnapshotObjectID `json:"heapObjectId"` // Heap snapshot object id to be accessible by means of $x command line API.
}

// HeapProfilerGetHeapObjectIDArgs contains the arguments for heapprofilerGetHeapObjectID.
type HeapProfilerGetHeapObjectIDArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // Identifier of the object to get heap object id for.
}

// HeapProfilerGetHeapObjectIDReply contains the return values for heapprofilerGetHeapObjectID.
type HeapProfilerGetHeapObjectIDReply struct {
	HeapSnapshotObjectID cdptype.HeapProfilerHeapSnapshotObjectID `json:"heapSnapshotObjectId"` // Id of the heap snapshot object corresponding to the passed remote object id.
}

// HeapProfilerStartSamplingArgs contains the arguments for heapprofilerStartSampling.
type HeapProfilerStartSamplingArgs struct {
	SamplingInterval *float64 `json:"samplingInterval,omitempty"` // Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
}

// SetSamplingInterval sets the SamplingInterval optional argument. Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
func (a *HeapProfilerStartSamplingArgs) SetSamplingInterval(samplingInterval float64) *HeapProfilerStartSamplingArgs {
	a.SamplingInterval = &samplingInterval
	return a
}

// HeapProfilerStopSamplingReply contains the return values for heapprofilerStopSampling.
type HeapProfilerStopSamplingReply struct {
	Profile cdptype.HeapProfilerSamplingHeapProfile `json:"profile"` // Recorded sampling heap profile.
}

// IOReadArgs contains the arguments for ioRead.
type IOReadArgs struct {
	Handle cdptype.IOStreamHandle `json:"handle"`           // Handle of the stream to read.
	Offset *int                   `json:"offset,omitempty"` // Seek to the specified offset before reading (if not specificed, proceed with offset following the last read).
	Size   *int                   `json:"size,omitempty"`   // Maximum number of bytes to read (left upon the agent discretion if not specified).
}

// SetOffset sets the Offset optional argument. Seek to the specified offset before reading (if not specificed, proceed with offset following the last read).
func (a *IOReadArgs) SetOffset(offset int) *IOReadArgs {
	a.Offset = &offset
	return a
}

// SetSize sets the Size optional argument. Maximum number of bytes to read (left upon the agent discretion if not specified).
func (a *IOReadArgs) SetSize(size int) *IOReadArgs {
	a.Size = &size
	return a
}

// IOReadReply contains the return values for ioRead.
type IOReadReply struct {
	Data string `json:"data"` // Data that were read.
	EOF  bool   `json:"eof"`  // Set if the end-of-file condition occured while reading.
}

// IOCloseArgs contains the arguments for ioClose.
type IOCloseArgs struct {
	Handle cdptype.IOStreamHandle `json:"handle"` // Handle of the stream to close.
}

// IndexedDBRequestDatabaseNamesArgs contains the arguments for indexeddbRequestDatabaseNames.
type IndexedDBRequestDatabaseNamesArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
}

// IndexedDBRequestDatabaseNamesReply contains the return values for indexeddbRequestDatabaseNames.
type IndexedDBRequestDatabaseNamesReply struct {
	DatabaseNames []string `json:"databaseNames"` // Database names for origin.
}

// IndexedDBRequestDatabaseArgs contains the arguments for indexeddbRequestDatabase.
type IndexedDBRequestDatabaseArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
	DatabaseName   string `json:"databaseName"`   // Database name.
}

// IndexedDBRequestDatabaseReply contains the return values for indexeddbRequestDatabase.
type IndexedDBRequestDatabaseReply struct {
	DatabaseWithObjectStores cdptype.IndexedDBDatabaseWithObjectStores `json:"databaseWithObjectStores"` // Database with an array of object stores.
}

// IndexedDBRequestDataArgs contains the arguments for indexeddbRequestData.
type IndexedDBRequestDataArgs struct {
	SecurityOrigin  string                     `json:"securityOrigin"`     // Security origin.
	DatabaseName    string                     `json:"databaseName"`       // Database name.
	ObjectStoreName string                     `json:"objectStoreName"`    // Object store name.
	IndexName       string                     `json:"indexName"`          // Index name, empty string for object store data requests.
	SkipCount       int                        `json:"skipCount"`          // Number of records to skip.
	PageSize        int                        `json:"pageSize"`           // Number of records to fetch.
	KeyRange        *cdptype.IndexedDBKeyRange `json:"keyRange,omitempty"` // Key range.
}

// SetKeyRange sets the KeyRange optional argument. Key range.
func (a *IndexedDBRequestDataArgs) SetKeyRange(keyRange cdptype.IndexedDBKeyRange) *IndexedDBRequestDataArgs {
	a.KeyRange = &keyRange
	return a
}

// IndexedDBRequestDataReply contains the return values for indexeddbRequestData.
type IndexedDBRequestDataReply struct {
	ObjectStoreDataEntries []cdptype.IndexedDBDataEntry `json:"objectStoreDataEntries"` // Array of object store data entries.
	HasMore                bool                         `json:"hasMore"`                // If true, there are more entries to fetch in the given range.
}

// IndexedDBClearObjectStoreArgs contains the arguments for indexeddbClearObjectStore.
type IndexedDBClearObjectStoreArgs struct {
	SecurityOrigin  string `json:"securityOrigin"`  // Security origin.
	DatabaseName    string `json:"databaseName"`    // Database name.
	ObjectStoreName string `json:"objectStoreName"` // Object store name.
}

// IndexedDBDeleteDatabaseArgs contains the arguments for indexeddbDeleteDatabase.
type IndexedDBDeleteDatabaseArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
	DatabaseName   string `json:"databaseName"`   // Database name.
}

// InputDispatchKeyEventArgs contains the arguments for inputDispatchKeyEvent.
type InputDispatchKeyEventArgs struct {
	Type                  string            `json:"type"`                            // Type of the key event.
	Modifiers             *int              `json:"modifiers,omitempty"`             // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp             cdptype.Timestamp `json:"timestamp,omitempty"`             // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Text                  *string           `json:"text,omitempty"`                  // Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
	UnmodifiedText        *string           `json:"unmodifiedText,omitempty"`        // Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
	KeyIdentifier         *string           `json:"keyIdentifier,omitempty"`         // Unique key identifier (e.g., 'U+0041') (default: "").
	Code                  *string           `json:"code,omitempty"`                  // Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Key                   *string           `json:"key,omitempty"`                   // Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	WindowsVirtualKeyCode *int              `json:"windowsVirtualKeyCode,omitempty"` // Windows virtual key code (default: 0).
	NativeVirtualKeyCode  *int              `json:"nativeVirtualKeyCode,omitempty"`  // Native virtual key code (default: 0).
	AutoRepeat            *bool             `json:"autoRepeat,omitempty"`            // Whether the event was generated from auto repeat (default: false).
	IsKeypad              *bool             `json:"isKeypad,omitempty"`              // Whether the event was generated from the keypad (default: false).
	IsSystemKey           *bool             `json:"isSystemKey,omitempty"`           // Whether the event was a system key event (default: false).
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchKeyEventArgs) SetModifiers(modifiers int) *InputDispatchKeyEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchKeyEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchKeyEventArgs {
	a.Timestamp = timestamp
	return a
}

// SetText sets the Text optional argument. Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
func (a *InputDispatchKeyEventArgs) SetText(text string) *InputDispatchKeyEventArgs {
	a.Text = &text
	return a
}

// SetUnmodifiedText sets the UnmodifiedText optional argument. Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
func (a *InputDispatchKeyEventArgs) SetUnmodifiedText(unmodifiedText string) *InputDispatchKeyEventArgs {
	a.UnmodifiedText = &unmodifiedText
	return a
}

// SetKeyIdentifier sets the KeyIdentifier optional argument. Unique key identifier (e.g., 'U+0041') (default: "").
func (a *InputDispatchKeyEventArgs) SetKeyIdentifier(keyIdentifier string) *InputDispatchKeyEventArgs {
	a.KeyIdentifier = &keyIdentifier
	return a
}

// SetCode sets the Code optional argument. Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
func (a *InputDispatchKeyEventArgs) SetCode(code string) *InputDispatchKeyEventArgs {
	a.Code = &code
	return a
}

// SetKey sets the Key optional argument. Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
func (a *InputDispatchKeyEventArgs) SetKey(key string) *InputDispatchKeyEventArgs {
	a.Key = &key
	return a
}

// SetWindowsVirtualKeyCode sets the WindowsVirtualKeyCode optional argument. Windows virtual key code (default: 0).
func (a *InputDispatchKeyEventArgs) SetWindowsVirtualKeyCode(windowsVirtualKeyCode int) *InputDispatchKeyEventArgs {
	a.WindowsVirtualKeyCode = &windowsVirtualKeyCode
	return a
}

// SetNativeVirtualKeyCode sets the NativeVirtualKeyCode optional argument. Native virtual key code (default: 0).
func (a *InputDispatchKeyEventArgs) SetNativeVirtualKeyCode(nativeVirtualKeyCode int) *InputDispatchKeyEventArgs {
	a.NativeVirtualKeyCode = &nativeVirtualKeyCode
	return a
}

// SetAutoRepeat sets the AutoRepeat optional argument. Whether the event was generated from auto repeat (default: false).
func (a *InputDispatchKeyEventArgs) SetAutoRepeat(autoRepeat bool) *InputDispatchKeyEventArgs {
	a.AutoRepeat = &autoRepeat
	return a
}

// SetIsKeypad sets the IsKeypad optional argument. Whether the event was generated from the keypad (default: false).
func (a *InputDispatchKeyEventArgs) SetIsKeypad(isKeypad bool) *InputDispatchKeyEventArgs {
	a.IsKeypad = &isKeypad
	return a
}

// SetIsSystemKey sets the IsSystemKey optional argument. Whether the event was a system key event (default: false).
func (a *InputDispatchKeyEventArgs) SetIsSystemKey(isSystemKey bool) *InputDispatchKeyEventArgs {
	a.IsSystemKey = &isSystemKey
	return a
}

// InputDispatchMouseEventArgs contains the arguments for inputDispatchMouseEvent.
type InputDispatchMouseEventArgs struct {
	Type       string            `json:"type"`                 // Type of the mouse event.
	X          int               `json:"x"`                    // X coordinate of the event relative to the main frame's viewport.
	Y          int               `json:"y"`                    // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Modifiers  *int              `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp  cdptype.Timestamp `json:"timestamp,omitempty"`  // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Button     *string           `json:"button,omitempty"`     // Mouse button (default: "none").
	ClickCount *int              `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchMouseEventArgs) SetModifiers(modifiers int) *InputDispatchMouseEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchMouseEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchMouseEventArgs {
	a.Timestamp = timestamp
	return a
}

// SetButton sets the Button optional argument. Mouse button (default: "none").
func (a *InputDispatchMouseEventArgs) SetButton(button string) *InputDispatchMouseEventArgs {
	a.Button = &button
	return a
}

// SetClickCount sets the ClickCount optional argument. Number of times the mouse button was clicked (default: 0).
func (a *InputDispatchMouseEventArgs) SetClickCount(clickCount int) *InputDispatchMouseEventArgs {
	a.ClickCount = &clickCount
	return a
}

// InputDispatchTouchEventArgs contains the arguments for inputDispatchTouchEvent.
type InputDispatchTouchEventArgs struct {
	Type        string                    `json:"type"`                // Type of the touch event.
	TouchPoints []cdptype.InputTouchPoint `json:"touchPoints"`         // Touch points.
	Modifiers   *int                      `json:"modifiers,omitempty"` // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp   cdptype.Timestamp         `json:"timestamp,omitempty"` // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchTouchEventArgs) SetModifiers(modifiers int) *InputDispatchTouchEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchTouchEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchTouchEventArgs {
	a.Timestamp = timestamp
	return a
}

// InputEmulateTouchFromMouseEventArgs contains the arguments for inputEmulateTouchFromMouseEvent.
type InputEmulateTouchFromMouseEventArgs struct {
	Type       string            `json:"type"`                 // Type of the mouse event.
	X          int               `json:"x"`                    // X coordinate of the mouse pointer in DIP.
	Y          int               `json:"y"`                    // Y coordinate of the mouse pointer in DIP.
	Timestamp  cdptype.Timestamp `json:"timestamp"`            // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
	Button     string            `json:"button"`               // Mouse button.
	DeltaX     *float64          `json:"deltaX,omitempty"`     // X delta in DIP for mouse wheel event (default: 0).
	DeltaY     *float64          `json:"deltaY,omitempty"`     // Y delta in DIP for mouse wheel event (default: 0).
	Modifiers  *int              `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	ClickCount *int              `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// SetDeltaX sets the DeltaX optional argument. X delta in DIP for mouse wheel event (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetDeltaX(deltaX float64) *InputEmulateTouchFromMouseEventArgs {
	a.DeltaX = &deltaX
	return a
}

// SetDeltaY sets the DeltaY optional argument. Y delta in DIP for mouse wheel event (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetDeltaY(deltaY float64) *InputEmulateTouchFromMouseEventArgs {
	a.DeltaY = &deltaY
	return a
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetModifiers(modifiers int) *InputEmulateTouchFromMouseEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetClickCount sets the ClickCount optional argument. Number of times the mouse button was clicked (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetClickCount(clickCount int) *InputEmulateTouchFromMouseEventArgs {
	a.ClickCount = &clickCount
	return a
}

// InputSynthesizePinchGestureArgs contains the arguments for inputSynthesizePinchGesture.
type InputSynthesizePinchGestureArgs struct {
	X                 int                            `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int                            `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	ScaleFactor       float64                        `json:"scaleFactor"`                 // Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	RelativeSpeed     *int                           `json:"relativeSpeed,omitempty"`     // Relative pointer speed in pixels per second (default: 800).
	GestureSourceType cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// SetRelativeSpeed sets the RelativeSpeed optional argument. Relative pointer speed in pixels per second (default: 800).
func (a *InputSynthesizePinchGestureArgs) SetRelativeSpeed(relativeSpeed int) *InputSynthesizePinchGestureArgs {
	a.RelativeSpeed = &relativeSpeed
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizePinchGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizePinchGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// InputSynthesizeScrollGestureArgs contains the arguments for inputSynthesizeScrollGesture.
type InputSynthesizeScrollGestureArgs struct {
	X                     int                            `json:"x"`                               // X coordinate of the start of the gesture in CSS pixels.
	Y                     int                            `json:"y"`                               // Y coordinate of the start of the gesture in CSS pixels.
	XDistance             *int                           `json:"xDistance,omitempty"`             // The distance to scroll along the X axis (positive to scroll left).
	YDistance             *int                           `json:"yDistance,omitempty"`             // The distance to scroll along the Y axis (positive to scroll up).
	XOverscroll           *int                           `json:"xOverscroll,omitempty"`           // The number of additional pixels to scroll back along the X axis, in addition to the given distance.
	YOverscroll           *int                           `json:"yOverscroll,omitempty"`           // The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
	PreventFling          *bool                          `json:"preventFling,omitempty"`          // Prevent fling (default: true).
	Speed                 *int                           `json:"speed,omitempty"`                 // Swipe speed in pixels per second (default: 800).
	GestureSourceType     cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"`     // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
	RepeatCount           *int                           `json:"repeatCount,omitempty"`           // The number of times to repeat the gesture (default: 0).
	RepeatDelayMs         *int                           `json:"repeatDelayMs,omitempty"`         // The number of milliseconds delay between each repeat. (default: 250).
	InteractionMarkerName *string                        `json:"interactionMarkerName,omitempty"` // The name of the interaction markers to generate, if not empty (default: "").
}

// SetXDistance sets the XDistance optional argument. The distance to scroll along the X axis (positive to scroll left).
func (a *InputSynthesizeScrollGestureArgs) SetXDistance(xDistance int) *InputSynthesizeScrollGestureArgs {
	a.XDistance = &xDistance
	return a
}

// SetYDistance sets the YDistance optional argument. The distance to scroll along the Y axis (positive to scroll up).
func (a *InputSynthesizeScrollGestureArgs) SetYDistance(yDistance int) *InputSynthesizeScrollGestureArgs {
	a.YDistance = &yDistance
	return a
}

// SetXOverscroll sets the XOverscroll optional argument. The number of additional pixels to scroll back along the X axis, in addition to the given distance.
func (a *InputSynthesizeScrollGestureArgs) SetXOverscroll(xOverscroll int) *InputSynthesizeScrollGestureArgs {
	a.XOverscroll = &xOverscroll
	return a
}

// SetYOverscroll sets the YOverscroll optional argument. The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
func (a *InputSynthesizeScrollGestureArgs) SetYOverscroll(yOverscroll int) *InputSynthesizeScrollGestureArgs {
	a.YOverscroll = &yOverscroll
	return a
}

// SetPreventFling sets the PreventFling optional argument. Prevent fling (default: true).
func (a *InputSynthesizeScrollGestureArgs) SetPreventFling(preventFling bool) *InputSynthesizeScrollGestureArgs {
	a.PreventFling = &preventFling
	return a
}

// SetSpeed sets the Speed optional argument. Swipe speed in pixels per second (default: 800).
func (a *InputSynthesizeScrollGestureArgs) SetSpeed(speed int) *InputSynthesizeScrollGestureArgs {
	a.Speed = &speed
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizeScrollGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizeScrollGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// SetRepeatCount sets the RepeatCount optional argument. The number of times to repeat the gesture (default: 0).
func (a *InputSynthesizeScrollGestureArgs) SetRepeatCount(repeatCount int) *InputSynthesizeScrollGestureArgs {
	a.RepeatCount = &repeatCount
	return a
}

// SetRepeatDelayMs sets the RepeatDelayMs optional argument. The number of milliseconds delay between each repeat. (default: 250).
func (a *InputSynthesizeScrollGestureArgs) SetRepeatDelayMs(repeatDelayMs int) *InputSynthesizeScrollGestureArgs {
	a.RepeatDelayMs = &repeatDelayMs
	return a
}

// SetInteractionMarkerName sets the InteractionMarkerName optional argument. The name of the interaction markers to generate, if not empty (default: "").
func (a *InputSynthesizeScrollGestureArgs) SetInteractionMarkerName(interactionMarkerName string) *InputSynthesizeScrollGestureArgs {
	a.InteractionMarkerName = &interactionMarkerName
	return a
}

// InputSynthesizeTapGestureArgs contains the arguments for inputSynthesizeTapGesture.
type InputSynthesizeTapGestureArgs struct {
	X                 int                            `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int                            `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	Duration          *int                           `json:"duration,omitempty"`          // Duration between touchdown and touchup events in ms (default: 50).
	TapCount          *int                           `json:"tapCount,omitempty"`          // Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	GestureSourceType cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// SetDuration sets the Duration optional argument. Duration between touchdown and touchup events in ms (default: 50).
func (a *InputSynthesizeTapGestureArgs) SetDuration(duration int) *InputSynthesizeTapGestureArgs {
	a.Duration = &duration
	return a
}

// SetTapCount sets the TapCount optional argument. Number of times to perform the tap (e.g. 2 for double tap, default: 1).
func (a *InputSynthesizeTapGestureArgs) SetTapCount(tapCount int) *InputSynthesizeTapGestureArgs {
	a.TapCount = &tapCount
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizeTapGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizeTapGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// LayerTreeCompositingReasonsArgs contains the arguments for layertreeCompositingReasons.
type LayerTreeCompositingReasonsArgs struct {
	LayerID cdptype.LayerTreeLayerID `json:"layerId"` // The id of the layer for which we want to get the reasons it was composited.
}

// LayerTreeCompositingReasonsReply contains the return values for layertreeCompositingReasons.
type LayerTreeCompositingReasonsReply struct {
	CompositingReasons []string `json:"compositingReasons"` // A list of strings specifying reasons for the given layer to become composited.
}

// LayerTreeMakeSnapshotArgs contains the arguments for layertreeMakeSnapshot.
type LayerTreeMakeSnapshotArgs struct {
	LayerID cdptype.LayerTreeLayerID `json:"layerId"` // The id of the layer.
}

// LayerTreeMakeSnapshotReply contains the return values for layertreeMakeSnapshot.
type LayerTreeMakeSnapshotReply struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// LayerTreeLoadSnapshotArgs contains the arguments for layertreeLoadSnapshot.
type LayerTreeLoadSnapshotArgs struct {
	Tiles []cdptype.LayerTreePictureTile `json:"tiles"` // An array of tiles composing the snapshot.
}

// LayerTreeLoadSnapshotReply contains the return values for layertreeLoadSnapshot.
type LayerTreeLoadSnapshotReply struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the snapshot.
}

// LayerTreeReleaseSnapshotArgs contains the arguments for layertreeReleaseSnapshot.
type LayerTreeReleaseSnapshotArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// LayerTreeProfileSnapshotArgs contains the arguments for layertreeProfileSnapshot.
type LayerTreeProfileSnapshotArgs struct {
	SnapshotID     cdptype.LayerTreeSnapshotID `json:"snapshotId"`               // The id of the layer snapshot.
	MinRepeatCount *int                        `json:"minRepeatCount,omitempty"` // The maximum number of times to replay the snapshot (1, if not specified).
	MinDuration    *float64                    `json:"minDuration,omitempty"`    // The minimum duration (in seconds) to replay the snapshot.
	ClipRect       *cdptype.DOMRect            `json:"clipRect,omitempty"`       // The clip rectangle to apply when replaying the snapshot.
}

// SetMinRepeatCount sets the MinRepeatCount optional argument. The maximum number of times to replay the snapshot (1, if not specified).
func (a *LayerTreeProfileSnapshotArgs) SetMinRepeatCount(minRepeatCount int) *LayerTreeProfileSnapshotArgs {
	a.MinRepeatCount = &minRepeatCount
	return a
}

// SetMinDuration sets the MinDuration optional argument. The minimum duration (in seconds) to replay the snapshot.
func (a *LayerTreeProfileSnapshotArgs) SetMinDuration(minDuration float64) *LayerTreeProfileSnapshotArgs {
	a.MinDuration = &minDuration
	return a
}

// SetClipRect sets the ClipRect optional argument. The clip rectangle to apply when replaying the snapshot.
func (a *LayerTreeProfileSnapshotArgs) SetClipRect(clipRect cdptype.DOMRect) *LayerTreeProfileSnapshotArgs {
	a.ClipRect = &clipRect
	return a
}

// LayerTreeProfileSnapshotReply contains the return values for layertreeProfileSnapshot.
type LayerTreeProfileSnapshotReply struct {
	Timings []cdptype.LayerTreePaintProfile `json:"timings"` // The array of paint profiles, one per run.
}

// LayerTreeReplaySnapshotArgs contains the arguments for layertreeReplaySnapshot.
type LayerTreeReplaySnapshotArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"`         // The id of the layer snapshot.
	FromStep   *int                        `json:"fromStep,omitempty"` // The first step to replay from (replay from the very start if not specified).
	ToStep     *int                        `json:"toStep,omitempty"`   // The last step to replay to (replay till the end if not specified).
	Scale      *float64                    `json:"scale,omitempty"`    // The scale to apply while replaying (defaults to 1).
}

// SetFromStep sets the FromStep optional argument. The first step to replay from (replay from the very start if not specified).
func (a *LayerTreeReplaySnapshotArgs) SetFromStep(fromStep int) *LayerTreeReplaySnapshotArgs {
	a.FromStep = &fromStep
	return a
}

// SetToStep sets the ToStep optional argument. The last step to replay to (replay till the end if not specified).
func (a *LayerTreeReplaySnapshotArgs) SetToStep(toStep int) *LayerTreeReplaySnapshotArgs {
	a.ToStep = &toStep
	return a
}

// SetScale sets the Scale optional argument. The scale to apply while replaying (defaults to 1).
func (a *LayerTreeReplaySnapshotArgs) SetScale(scale float64) *LayerTreeReplaySnapshotArgs {
	a.Scale = &scale
	return a
}

// LayerTreeReplaySnapshotReply contains the return values for layertreeReplaySnapshot.
type LayerTreeReplaySnapshotReply struct {
	DataURL string `json:"dataURL"` // A data: URL for resulting image.
}

// LayerTreeSnapshotCommandLogArgs contains the arguments for layertreeSnapshotCommandLog.
type LayerTreeSnapshotCommandLogArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// LayerTreeSnapshotCommandLogReply contains the return values for layertreeSnapshotCommandLog.
type LayerTreeSnapshotCommandLogReply struct {
	CommandLog []json.RawMessage `json:"commandLog"` // The array of canvas function calls.
}

// LogStartViolationsReportArgs contains the arguments for logStartViolationsReport.
type LogStartViolationsReportArgs struct {
	Config []cdptype.LogViolationSetting `json:"config"` // Configuration for violations.
}

// MemoryGetDOMCountersReply contains the return values for memoryGetDOMCounters.
type MemoryGetDOMCountersReply struct {
	Documents        int `json:"documents"`        //
	Nodes            int `json:"nodes"`            //
	JsEventListeners int `json:"jsEventListeners"` //
}

// MemorySetPressureNotificationsSuppressedArgs contains the arguments for memorySetPressureNotificationsSuppressed.
type MemorySetPressureNotificationsSuppressedArgs struct {
	Suppressed bool `json:"suppressed"` // If true, memory pressure notifications will be suppressed.
}

// MemorySimulatePressureNotificationArgs contains the arguments for memorySimulatePressureNotification.
type MemorySimulatePressureNotificationArgs struct {
	Level cdptype.MemoryPressureLevel `json:"level"` // Memory pressure level of the notification.
}

// NetworkEnableArgs contains the arguments for networkEnable.
type NetworkEnableArgs struct {
	MaxTotalBufferSize    *int `json:"maxTotalBufferSize,omitempty"`    // Buffer size in bytes to use when preserving network payloads (XHRs, etc).
	MaxResourceBufferSize *int `json:"maxResourceBufferSize,omitempty"` // Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
}

// SetMaxTotalBufferSize sets the MaxTotalBufferSize optional argument. Buffer size in bytes to use when preserving network payloads (XHRs, etc).
func (a *NetworkEnableArgs) SetMaxTotalBufferSize(maxTotalBufferSize int) *NetworkEnableArgs {
	a.MaxTotalBufferSize = &maxTotalBufferSize
	return a
}

// SetMaxResourceBufferSize sets the MaxResourceBufferSize optional argument. Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
func (a *NetworkEnableArgs) SetMaxResourceBufferSize(maxResourceBufferSize int) *NetworkEnableArgs {
	a.MaxResourceBufferSize = &maxResourceBufferSize
	return a
}

// NetworkSetUserAgentOverrideArgs contains the arguments for networkSetUserAgentOverride.
type NetworkSetUserAgentOverrideArgs struct {
	UserAgent string `json:"userAgent"` // User agent to use.
}

// NetworkSetExtraHTTPHeadersArgs contains the arguments for networkSetExtraHTTPHeaders.
type NetworkSetExtraHTTPHeadersArgs struct {
	Headers cdptype.NetworkHeaders `json:"headers"` // Map with extra HTTP headers.
}

// NetworkGetResponseBodyArgs contains the arguments for networkGetResponseBody.
type NetworkGetResponseBodyArgs struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Identifier of the network request to get content for.
}

// NetworkGetResponseBodyReply contains the return values for networkGetResponseBody.
type NetworkGetResponseBodyReply struct {
	Body          string `json:"body"`          // Response body.
	Base64Encoded bool   `json:"base64Encoded"` // True, if content was sent as base64.
}

// NetworkSetBlockedURLsArgs contains the arguments for networkSetBlockedURLs.
type NetworkSetBlockedURLsArgs struct {
	Urls []string `json:"urls"` // URLs to block.
}

// NetworkReplayXHRArgs contains the arguments for networkReplayXHR.
type NetworkReplayXHRArgs struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Identifier of XHR to replay.
}

// NetworkSetMonitoringXHREnabledArgs contains the arguments for networkSetMonitoringXHREnabled.
type NetworkSetMonitoringXHREnabledArgs struct {
	Enabled bool `json:"enabled"` // Monitoring enabled state.
}

// NetworkCanClearBrowserCacheReply contains the return values for networkCanClearBrowserCache.
type NetworkCanClearBrowserCacheReply struct {
	Result bool `json:"result"` // True if browser cache can be cleared.
}

// NetworkCanClearBrowserCookiesReply contains the return values for networkCanClearBrowserCookies.
type NetworkCanClearBrowserCookiesReply struct {
	Result bool `json:"result"` // True if browser cookies can be cleared.
}

// NetworkGetCookiesArgs contains the arguments for networkGetCookies.
type NetworkGetCookiesArgs struct {
	Urls []string `json:"urls,omitempty"` // The list of URLs for which applicable cookies will be fetched
}

// SetUrls sets the Urls optional argument. The list of URLs for which applicable cookies will be fetched
func (a *NetworkGetCookiesArgs) SetUrls(urls []string) *NetworkGetCookiesArgs {
	a.Urls = urls
	return a
}

// NetworkGetCookiesReply contains the return values for networkGetCookies.
type NetworkGetCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// NetworkGetAllCookiesReply contains the return values for networkGetAllCookies.
type NetworkGetAllCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// NetworkDeleteCookieArgs contains the arguments for networkDeleteCookie.
type NetworkDeleteCookieArgs struct {
	CookieName string `json:"cookieName"` // Name of the cookie to remove.
	URL        string `json:"url"`        // URL to match cooke domain and path.
}

// NetworkSetCookieArgs contains the arguments for networkSetCookie.
type NetworkSetCookieArgs struct {
	URL            string                        `json:"url"`                      // The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie.
	Name           string                        `json:"name"`                     // The name of the cookie.
	Value          string                        `json:"value"`                    // The value of the cookie.
	Domain         *string                       `json:"domain,omitempty"`         // If omitted, the cookie becomes a host-only cookie.
	Path           *string                       `json:"path,omitempty"`           // Defaults to the path portion of the url parameter.
	Secure         *bool                         `json:"secure,omitempty"`         // Defaults ot false.
	HTTPOnly       *bool                         `json:"httpOnly,omitempty"`       // Defaults to false.
	SameSite       cdptype.NetworkCookieSameSite `json:"sameSite,omitempty"`       // Defaults to browser default behavior.
	ExpirationDate cdptype.NetworkTimestamp      `json:"expirationDate,omitempty"` // If omitted, the cookie becomes a session cookie.
}

// SetDomain sets the Domain optional argument. If omitted, the cookie becomes a host-only cookie.
func (a *NetworkSetCookieArgs) SetDomain(domain string) *NetworkSetCookieArgs {
	a.Domain = &domain
	return a
}

// SetPath sets the Path optional argument. Defaults to the path portion of the url parameter.
func (a *NetworkSetCookieArgs) SetPath(path string) *NetworkSetCookieArgs {
	a.Path = &path
	return a
}

// SetSecure sets the Secure optional argument. Defaults ot false.
func (a *NetworkSetCookieArgs) SetSecure(secure bool) *NetworkSetCookieArgs {
	a.Secure = &secure
	return a
}

// SetHTTPOnly sets the HTTPOnly optional argument. Defaults to false.
func (a *NetworkSetCookieArgs) SetHTTPOnly(httpOnly bool) *NetworkSetCookieArgs {
	a.HTTPOnly = &httpOnly
	return a
}

// SetSameSite sets the SameSite optional argument. Defaults to browser default behavior.
func (a *NetworkSetCookieArgs) SetSameSite(sameSite cdptype.NetworkCookieSameSite) *NetworkSetCookieArgs {
	a.SameSite = sameSite
	return a
}

// SetExpirationDate sets the ExpirationDate optional argument. If omitted, the cookie becomes a session cookie.
func (a *NetworkSetCookieArgs) SetExpirationDate(expirationDate cdptype.NetworkTimestamp) *NetworkSetCookieArgs {
	a.ExpirationDate = expirationDate
	return a
}

// NetworkSetCookieReply contains the return values for networkSetCookie.
type NetworkSetCookieReply struct {
	Success bool `json:"success"` // True if successfully set cookie.
}

// NetworkCanEmulateNetworkConditionsReply contains the return values for networkCanEmulateNetworkConditions.
type NetworkCanEmulateNetworkConditionsReply struct {
	Result bool `json:"result"` // True if emulation of network conditions is supported.
}

// NetworkEmulateNetworkConditionsArgs contains the arguments for networkEmulateNetworkConditions.
type NetworkEmulateNetworkConditionsArgs struct {
	Offline            bool                          `json:"offline"`                  // True to emulate internet disconnection.
	Latency            float64                       `json:"latency"`                  // Additional latency (ms).
	DownloadThroughput float64                       `json:"downloadThroughput"`       // Maximal aggregated download throughput.
	UploadThroughput   float64                       `json:"uploadThroughput"`         // Maximal aggregated upload throughput.
	ConnectionType     cdptype.NetworkConnectionType `json:"connectionType,omitempty"` // Connection type if known.
}

// SetConnectionType sets the ConnectionType optional argument. Connection type if known.
func (a *NetworkEmulateNetworkConditionsArgs) SetConnectionType(connectionType cdptype.NetworkConnectionType) *NetworkEmulateNetworkConditionsArgs {
	a.ConnectionType = connectionType
	return a
}

// NetworkSetCacheDisabledArgs contains the arguments for networkSetCacheDisabled.
type NetworkSetCacheDisabledArgs struct {
	CacheDisabled bool `json:"cacheDisabled"` // Cache disabled state.
}

// NetworkSetBypassServiceWorkerArgs contains the arguments for networkSetBypassServiceWorker.
type NetworkSetBypassServiceWorkerArgs struct {
	Bypass bool `json:"bypass"` // Bypass service worker and load from network.
}

// NetworkSetDataSizeLimitsForTestArgs contains the arguments for networkSetDataSizeLimitsForTest.
type NetworkSetDataSizeLimitsForTestArgs struct {
	MaxTotalSize    int `json:"maxTotalSize"`    // Maximum total buffer size.
	MaxResourceSize int `json:"maxResourceSize"` // Maximum per-resource size.
}

// NetworkGetCertificateArgs contains the arguments for networkGetCertificate.
type NetworkGetCertificateArgs struct {
	Origin string `json:"origin"` // Origin to get certificate for.
}

// NetworkGetCertificateReply contains the return values for networkGetCertificate.
type NetworkGetCertificateReply struct {
	TableNames []string `json:"tableNames"` //
}

// PageAddScriptToEvaluateOnLoadArgs contains the arguments for pageAddScriptToEvaluateOnLoad.
type PageAddScriptToEvaluateOnLoadArgs struct {
	ScriptSource string `json:"scriptSource"` //
}

// PageAddScriptToEvaluateOnLoadReply contains the return values for pageAddScriptToEvaluateOnLoad.
type PageAddScriptToEvaluateOnLoadReply struct {
	Identifier cdptype.PageScriptIdentifier `json:"identifier"` // Identifier of the added script.
}

// PageRemoveScriptToEvaluateOnLoadArgs contains the arguments for pageRemoveScriptToEvaluateOnLoad.
type PageRemoveScriptToEvaluateOnLoadArgs struct {
	Identifier cdptype.PageScriptIdentifier `json:"identifier"` //
}

// PageSetAutoAttachToCreatedPagesArgs contains the arguments for pageSetAutoAttachToCreatedPages.
type PageSetAutoAttachToCreatedPagesArgs struct {
	AutoAttach bool `json:"autoAttach"` // If true, browser will open a new inspector window for every page created from this one.
}

// PageReloadArgs contains the arguments for pageReload.
type PageReloadArgs struct {
	IgnoreCache            *bool   `json:"ignoreCache,omitempty"`            // If true, browser cache is ignored (as if the user pressed Shift+refresh).
	ScriptToEvaluateOnLoad *string `json:"scriptToEvaluateOnLoad,omitempty"` // If set, the script will be injected into all frames of the inspected page after reload.
}

// SetIgnoreCache sets the IgnoreCache optional argument. If true, browser cache is ignored (as if the user pressed Shift+refresh).
func (a *PageReloadArgs) SetIgnoreCache(ignoreCache bool) *PageReloadArgs {
	a.IgnoreCache = &ignoreCache
	return a
}

// SetScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad optional argument. If set, the script will be injected into all frames of the inspected page after reload.
func (a *PageReloadArgs) SetScriptToEvaluateOnLoad(scriptToEvaluateOnLoad string) *PageReloadArgs {
	a.ScriptToEvaluateOnLoad = &scriptToEvaluateOnLoad
	return a
}

// PageNavigateArgs contains the arguments for pageNavigate.
type PageNavigateArgs struct {
	URL      string  `json:"url"`                // URL to navigate the page to.
	Referrer *string `json:"referrer,omitempty"` // Referrer URL.
}

// SetReferrer sets the Referrer optional argument. Referrer URL.
func (a *PageNavigateArgs) SetReferrer(referrer string) *PageNavigateArgs {
	a.Referrer = &referrer
	return a
}

// PageNavigateReply contains the return values for pageNavigate.
type PageNavigateReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id that will be navigated.
}

// PageGetNavigationHistoryReply contains the return values for pageGetNavigationHistory.
type PageGetNavigationHistoryReply struct {
	CurrentIndex int                           `json:"currentIndex"` // Index of the current navigation history entry.
	Entries      []cdptype.PageNavigationEntry `json:"entries"`      // Array of navigation history entries.
}

// PageNavigateToHistoryEntryArgs contains the arguments for pageNavigateToHistoryEntry.
type PageNavigateToHistoryEntryArgs struct {
	EntryID int `json:"entryId"` // Unique id of the entry to navigate to.
}

// PageGetCookiesReply contains the return values for pageGetCookies.
type PageGetCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// PageDeleteCookieArgs contains the arguments for pageDeleteCookie.
type PageDeleteCookieArgs struct {
	CookieName string `json:"cookieName"` // Name of the cookie to remove.
	URL        string `json:"url"`        // URL to match cooke domain and path.
}

// PageGetResourceTreeReply contains the return values for pageGetResourceTree.
type PageGetResourceTreeReply struct {
	FrameTree cdptype.PageFrameResourceTree `json:"frameTree"` // Present frame / resource tree structure.
}

// PageGetResourceContentArgs contains the arguments for pageGetResourceContent.
type PageGetResourceContentArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id to get resource for.
	URL     string              `json:"url"`     // URL of the resource to get content for.
}

// PageGetResourceContentReply contains the return values for pageGetResourceContent.
type PageGetResourceContentReply struct {
	Content       string `json:"content"`       // Resource content.
	Base64Encoded bool   `json:"base64Encoded"` // True, if content was served as base64.
}

// PageSearchInResourceArgs contains the arguments for pageSearchInResource.
type PageSearchInResourceArgs struct {
	FrameID       cdptype.PageFrameID `json:"frameId"`                 // Frame id for resource to search in.
	URL           string              `json:"url"`                     // URL of the resource to search in.
	Query         string              `json:"query"`                   // String to search for.
	CaseSensitive *bool               `json:"caseSensitive,omitempty"` // If true, search is case sensitive.
	IsRegex       *bool               `json:"isRegex,omitempty"`       // If true, treats string parameter as regex.
}

// SetCaseSensitive sets the CaseSensitive optional argument. If true, search is case sensitive.
func (a *PageSearchInResourceArgs) SetCaseSensitive(caseSensitive bool) *PageSearchInResourceArgs {
	a.CaseSensitive = &caseSensitive
	return a
}

// SetIsRegex sets the IsRegex optional argument. If true, treats string parameter as regex.
func (a *PageSearchInResourceArgs) SetIsRegex(isRegex bool) *PageSearchInResourceArgs {
	a.IsRegex = &isRegex
	return a
}

// PageSearchInResourceReply contains the return values for pageSearchInResource.
type PageSearchInResourceReply struct {
	Result []cdptype.DebuggerSearchMatch `json:"result"` // List of search matches.
}

// PageSetDocumentContentArgs contains the arguments for pageSetDocumentContent.
type PageSetDocumentContentArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id to set HTML for.
	HTML    string              `json:"html"`    // HTML content to set.
}

// PageSetDeviceMetricsOverrideArgs contains the arguments for pageSetDeviceMetricsOverride.
type PageSetDeviceMetricsOverrideArgs struct {
	Width             int                                 `json:"width"`                       // Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height            int                                 `json:"height"`                      // Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	DeviceScaleFactor float64                             `json:"deviceScaleFactor"`           // Overriding device scale factor value. 0 disables the override.
	Mobile            bool                                `json:"mobile"`                      // Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
	FitWindow         bool                                `json:"fitWindow"`                   // Whether a view that exceeds the available browser window area should be scaled down to fit.
	Scale             *float64                            `json:"scale,omitempty"`             // Scale to apply to resulting view image. Ignored in |fitWindow| mode.
	OffsetX           *float64                            `json:"offsetX,omitempty"`           // X offset to shift resulting view image by. Ignored in |fitWindow| mode.
	OffsetY           *float64                            `json:"offsetY,omitempty"`           // Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
	ScreenWidth       *int                                `json:"screenWidth,omitempty"`       // Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenHeight      *int                                `json:"screenHeight,omitempty"`      // Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionX         *int                                `json:"positionX,omitempty"`         // Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionY         *int                                `json:"positionY,omitempty"`         // Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenOrientation *cdptype.EmulationScreenOrientation `json:"screenOrientation,omitempty"` // Screen orientation override.
}

// SetScale sets the Scale optional argument. Scale to apply to resulting view image. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetScale(scale float64) *PageSetDeviceMetricsOverrideArgs {
	a.Scale = &scale
	return a
}

// SetOffsetX sets the OffsetX optional argument. X offset to shift resulting view image by. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetOffsetX(offsetX float64) *PageSetDeviceMetricsOverrideArgs {
	a.OffsetX = &offsetX
	return a
}

// SetOffsetY sets the OffsetY optional argument. Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetOffsetY(offsetY float64) *PageSetDeviceMetricsOverrideArgs {
	a.OffsetY = &offsetY
	return a
}

// SetScreenWidth sets the ScreenWidth optional argument. Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenWidth(screenWidth int) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenWidth = &screenWidth
	return a
}

// SetScreenHeight sets the ScreenHeight optional argument. Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenHeight(screenHeight int) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenHeight = &screenHeight
	return a
}

// SetPositionX sets the PositionX optional argument. Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetPositionX(positionX int) *PageSetDeviceMetricsOverrideArgs {
	a.PositionX = &positionX
	return a
}

// SetPositionY sets the PositionY optional argument. Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetPositionY(positionY int) *PageSetDeviceMetricsOverrideArgs {
	a.PositionY = &positionY
	return a
}

// SetScreenOrientation sets the ScreenOrientation optional argument. Screen orientation override.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenOrientation(screenOrientation cdptype.EmulationScreenOrientation) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenOrientation = &screenOrientation
	return a
}

// PageSetGeolocationOverrideArgs contains the arguments for pageSetGeolocationOverride.
type PageSetGeolocationOverrideArgs struct {
	Latitude  *float64 `json:"latitude,omitempty"`  // Mock latitude
	Longitude *float64 `json:"longitude,omitempty"` // Mock longitude
	Accuracy  *float64 `json:"accuracy,omitempty"`  // Mock accuracy
}

// SetLatitude sets the Latitude optional argument. Mock latitude
func (a *PageSetGeolocationOverrideArgs) SetLatitude(latitude float64) *PageSetGeolocationOverrideArgs {
	a.Latitude = &latitude
	return a
}

// SetLongitude sets the Longitude optional argument. Mock longitude
func (a *PageSetGeolocationOverrideArgs) SetLongitude(longitude float64) *PageSetGeolocationOverrideArgs {
	a.Longitude = &longitude
	return a
}

// SetAccuracy sets the Accuracy optional argument. Mock accuracy
func (a *PageSetGeolocationOverrideArgs) SetAccuracy(accuracy float64) *PageSetGeolocationOverrideArgs {
	a.Accuracy = &accuracy
	return a
}

// PageSetDeviceOrientationOverrideArgs contains the arguments for pageSetDeviceOrientationOverride.
type PageSetDeviceOrientationOverrideArgs struct {
	Alpha float64 `json:"alpha"` // Mock alpha
	Beta  float64 `json:"beta"`  // Mock beta
	Gamma float64 `json:"gamma"` // Mock gamma
}

// PageSetTouchEmulationEnabledArgs contains the arguments for pageSetTouchEmulationEnabled.
type PageSetTouchEmulationEnabledArgs struct {
	Enabled       bool    `json:"enabled"`                 // Whether the touch event emulation should be enabled.
	Configuration *string `json:"configuration,omitempty"` // Touch/gesture events configuration. Default: current platform.
}

// SetConfiguration sets the Configuration optional argument. Touch/gesture events configuration. Default: current platform.
func (a *PageSetTouchEmulationEnabledArgs) SetConfiguration(configuration string) *PageSetTouchEmulationEnabledArgs {
	a.Configuration = &configuration
	return a
}

// PageCaptureScreenshotArgs contains the arguments for pageCaptureScreenshot.
type PageCaptureScreenshotArgs struct {
	Format  *string `json:"format,omitempty"`  // Image compression format (defaults to png).
	Quality *int    `json:"quality,omitempty"` // Compression quality from range [0..100] (jpeg only).
}

// SetFormat sets the Format optional argument. Image compression format (defaults to png).
func (a *PageCaptureScreenshotArgs) SetFormat(format string) *PageCaptureScreenshotArgs {
	a.Format = &format
	return a
}

// SetQuality sets the Quality optional argument. Compression quality from range [0..100] (jpeg only).
func (a *PageCaptureScreenshotArgs) SetQuality(quality int) *PageCaptureScreenshotArgs {
	a.Quality = &quality
	return a
}

// PageCaptureScreenshotReply contains the return values for pageCaptureScreenshot.
type PageCaptureScreenshotReply struct {
	Data []byte `json:"data"` // Base64-encoded image data.
}

// PagePrintToPDFReply contains the return values for pagePrintToPDF.
type PagePrintToPDFReply struct {
	Data []byte `json:"data"` // Base64-encoded pdf data.
}

// PageStartScreencastArgs contains the arguments for pageStartScreencast.
type PageStartScreencastArgs struct {
	Format        *string `json:"format,omitempty"`        // Image compression format.
	Quality       *int    `json:"quality,omitempty"`       // Compression quality from range [0..100].
	MaxWidth      *int    `json:"maxWidth,omitempty"`      // Maximum screenshot width.
	MaxHeight     *int    `json:"maxHeight,omitempty"`     // Maximum screenshot height.
	EveryNthFrame *int    `json:"everyNthFrame,omitempty"` // Send every n-th frame.
}

// SetFormat sets the Format optional argument. Image compression format.
func (a *PageStartScreencastArgs) SetFormat(format string) *PageStartScreencastArgs {
	a.Format = &format
	return a
}

// SetQuality sets the Quality optional argument. Compression quality from range [0..100].
func (a *PageStartScreencastArgs) SetQuality(quality int) *PageStartScreencastArgs {
	a.Quality = &quality
	return a
}

// SetMaxWidth sets the MaxWidth optional argument. Maximum screenshot width.
func (a *PageStartScreencastArgs) SetMaxWidth(maxWidth int) *PageStartScreencastArgs {
	a.MaxWidth = &maxWidth
	return a
}

// SetMaxHeight sets the MaxHeight optional argument. Maximum screenshot height.
func (a *PageStartScreencastArgs) SetMaxHeight(maxHeight int) *PageStartScreencastArgs {
	a.MaxHeight = &maxHeight
	return a
}

// SetEveryNthFrame sets the EveryNthFrame optional argument. Send every n-th frame.
func (a *PageStartScreencastArgs) SetEveryNthFrame(everyNthFrame int) *PageStartScreencastArgs {
	a.EveryNthFrame = &everyNthFrame
	return a
}

// PageScreencastFrameAckArgs contains the arguments for pageScreencastFrameAck.
type PageScreencastFrameAckArgs struct {
	SessionID int `json:"sessionId"` // Frame number.
}

// PageHandleJavaScriptDialogArgs contains the arguments for pageHandleJavaScriptDialog.
type PageHandleJavaScriptDialogArgs struct {
	Accept     bool    `json:"accept"`               // Whether to accept or dismiss the dialog.
	PromptText *string `json:"promptText,omitempty"` // The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
}

// SetPromptText sets the PromptText optional argument. The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
func (a *PageHandleJavaScriptDialogArgs) SetPromptText(promptText string) *PageHandleJavaScriptDialogArgs {
	a.PromptText = &promptText
	return a
}

// PageSetColorPickerEnabledArgs contains the arguments for pageSetColorPickerEnabled.
type PageSetColorPickerEnabledArgs struct {
	Enabled bool `json:"enabled"` // Shows / hides color picker
}

// PageConfigureOverlayArgs contains the arguments for pageConfigureOverlay.
type PageConfigureOverlayArgs struct {
	Suspended *bool   `json:"suspended,omitempty"` // Whether overlay should be suspended and not consume any resources.
	Message   *string `json:"message,omitempty"`   // Overlay message to display.
}

// SetSuspended sets the Suspended optional argument. Whether overlay should be suspended and not consume any resources.
func (a *PageConfigureOverlayArgs) SetSuspended(suspended bool) *PageConfigureOverlayArgs {
	a.Suspended = &suspended
	return a
}

// SetMessage sets the Message optional argument. Overlay message to display.
func (a *PageConfigureOverlayArgs) SetMessage(message string) *PageConfigureOverlayArgs {
	a.Message = &message
	return a
}

// PageGetAppManifestReply contains the return values for pageGetAppManifest.
type PageGetAppManifestReply struct {
	URL    string                         `json:"url"`            // Manifest location.
	Errors []cdptype.PageAppManifestError `json:"errors"`         //
	Data   *string                        `json:"data,omitempty"` // Manifest content.
}

// PageSetControlNavigationsArgs contains the arguments for pageSetControlNavigations.
type PageSetControlNavigationsArgs struct {
	Enabled bool `json:"enabled"` //
}

// PageProcessNavigationArgs contains the arguments for pageProcessNavigation.
type PageProcessNavigationArgs struct {
	Response     cdptype.PageNavigationResponse `json:"response"`     //
	NavigationID int                            `json:"navigationId"` //
}

// PageGetLayoutMetricsReply contains the return values for pageGetLayoutMetrics.
type PageGetLayoutMetricsReply struct {
	LayoutViewport cdptype.PageLayoutViewport `json:"layoutViewport"` // Metrics relating to the layout viewport.
	VisualViewport cdptype.PageVisualViewport `json:"visualViewport"` // Metrics relating to the visual viewport.
	ContentSize    cdptype.DOMRect            `json:"contentSize"`    // Size of scrollable area.
}

// ProfilerSetSamplingIntervalArgs contains the arguments for profilerSetSamplingInterval.
type ProfilerSetSamplingIntervalArgs struct {
	Interval int `json:"interval"` // New sampling interval in microseconds.
}

// ProfilerStopReply contains the return values for profilerStop.
type ProfilerStopReply struct {
	Profile cdptype.ProfilerProfile `json:"profile"` // Recorded profile.
}

// ProfilerTakePreciseCoverageReply contains the return values for profilerTakePreciseCoverage.
type ProfilerTakePreciseCoverageReply struct {
	Result []cdptype.ProfilerScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// ProfilerGetBestEffortCoverageReply contains the return values for profilerGetBestEffortCoverage.
type ProfilerGetBestEffortCoverageReply struct {
	Result []cdptype.ProfilerScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// RenderingSetShowPaintRectsArgs contains the arguments for renderingSetShowPaintRects.
type RenderingSetShowPaintRectsArgs struct {
	Result bool `json:"result"` // True for showing paint rectangles
}

// RenderingSetShowDebugBordersArgs contains the arguments for renderingSetShowDebugBorders.
type RenderingSetShowDebugBordersArgs struct {
	Show bool `json:"show"` // True for showing debug borders
}

// RenderingSetShowFPSCounterArgs contains the arguments for renderingSetShowFPSCounter.
type RenderingSetShowFPSCounterArgs struct {
	Show bool `json:"show"` // True for showing the FPS counter
}

// RenderingSetShowScrollBottleneckRectsArgs contains the arguments for renderingSetShowScrollBottleneckRects.
type RenderingSetShowScrollBottleneckRectsArgs struct {
	Show bool `json:"show"` // True for showing scroll bottleneck rects
}

// RenderingSetShowViewportSizeOnResizeArgs contains the arguments for renderingSetShowViewportSizeOnResize.
type RenderingSetShowViewportSizeOnResizeArgs struct {
	Show bool `json:"show"` // Whether to paint size or not.
}

// RuntimeEvaluateArgs contains the arguments for runtimeEvaluate.
type RuntimeEvaluateArgs struct {
	Expression            string                             `json:"expression"`                      // Expression to evaluate.
	ObjectGroup           *string                            `json:"objectGroup,omitempty"`           // Symbolic group name that can be used to release multiple objects.
	IncludeCommandLineAPI *bool                              `json:"includeCommandLineAPI,omitempty"` // Determines whether Command Line API should be available during the evaluation.
	Silent                *bool                              `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ContextID             *cdptype.RuntimeExecutionContextID `json:"contextId,omitempty"`             // Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
	ReturnByValue         *bool                              `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview       *bool                              `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	UserGesture           *bool                              `json:"userGesture,omitempty"`           // Whether execution should be treated as initiated by user in the UI.
	AwaitPromise          *bool                              `json:"awaitPromise,omitempty"`          // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *RuntimeEvaluateArgs) SetObjectGroup(objectGroup string) *RuntimeEvaluateArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Determines whether Command Line API should be available during the evaluation.
func (a *RuntimeEvaluateArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *RuntimeEvaluateArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeEvaluateArgs) SetSilent(silent bool) *RuntimeEvaluateArgs {
	a.Silent = &silent
	return a
}

// SetContextID sets the ContextID optional argument. Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeEvaluateArgs) SetContextID(contextID cdptype.RuntimeExecutionContextID) *RuntimeEvaluateArgs {
	a.ContextID = &contextID
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *RuntimeEvaluateArgs) SetReturnByValue(returnByValue bool) *RuntimeEvaluateArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeEvaluateArgs) SetGeneratePreview(generatePreview bool) *RuntimeEvaluateArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetUserGesture sets the UserGesture optional argument. Whether execution should be treated as initiated by user in the UI.
func (a *RuntimeEvaluateArgs) SetUserGesture(userGesture bool) *RuntimeEvaluateArgs {
	a.UserGesture = &userGesture
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeEvaluateArgs) SetAwaitPromise(awaitPromise bool) *RuntimeEvaluateArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeEvaluateReply contains the return values for runtimeEvaluate.
type RuntimeEvaluateReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Evaluation result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeAwaitPromiseArgs contains the arguments for runtimeAwaitPromise.
type RuntimeAwaitPromiseArgs struct {
	PromiseObjectID cdptype.RuntimeRemoteObjectID `json:"promiseObjectId"`           // Identifier of the promise.
	ReturnByValue   *bool                         `json:"returnByValue,omitempty"`   // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview *bool                         `json:"generatePreview,omitempty"` // Whether preview should be generated for the result.
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *RuntimeAwaitPromiseArgs) SetReturnByValue(returnByValue bool) *RuntimeAwaitPromiseArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeAwaitPromiseArgs) SetGeneratePreview(generatePreview bool) *RuntimeAwaitPromiseArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// RuntimeAwaitPromiseReply contains the return values for runtimeAwaitPromise.
type RuntimeAwaitPromiseReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Promise result. Will contain rejected value if promise was rejected.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details if stack strace is available.
}

// RuntimeCallFunctionOnArgs contains the arguments for runtimeCallFunctionOn.
type RuntimeCallFunctionOnArgs struct {
	ObjectID            cdptype.RuntimeRemoteObjectID `json:"objectId"`                  // Identifier of the object to call function on.
	FunctionDeclaration string                        `json:"functionDeclaration"`       // Declaration of the function to call.
	Arguments           []cdptype.RuntimeCallArgument `json:"arguments,omitempty"`       // Call arguments. All call arguments must belong to the same JavaScript world as the target object.
	Silent              *bool                         `json:"silent,omitempty"`          // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ReturnByValue       *bool                         `json:"returnByValue,omitempty"`   // Whether the result is expected to be a JSON object which should be sent by value.
	GeneratePreview     *bool                         `json:"generatePreview,omitempty"` // Whether preview should be generated for the result.
	UserGesture         *bool                         `json:"userGesture,omitempty"`     // Whether execution should be treated as initiated by user in the UI.
	AwaitPromise        *bool                         `json:"awaitPromise,omitempty"`    // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// SetArguments sets the Arguments optional argument. Call arguments. All call arguments must belong to the same JavaScript world as the target object.
func (a *RuntimeCallFunctionOnArgs) SetArguments(arguments []cdptype.RuntimeCallArgument) *RuntimeCallFunctionOnArgs {
	a.Arguments = arguments
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeCallFunctionOnArgs) SetSilent(silent bool) *RuntimeCallFunctionOnArgs {
	a.Silent = &silent
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object which should be sent by value.
func (a *RuntimeCallFunctionOnArgs) SetReturnByValue(returnByValue bool) *RuntimeCallFunctionOnArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeCallFunctionOnArgs) SetGeneratePreview(generatePreview bool) *RuntimeCallFunctionOnArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetUserGesture sets the UserGesture optional argument. Whether execution should be treated as initiated by user in the UI.
func (a *RuntimeCallFunctionOnArgs) SetUserGesture(userGesture bool) *RuntimeCallFunctionOnArgs {
	a.UserGesture = &userGesture
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeCallFunctionOnArgs) SetAwaitPromise(awaitPromise bool) *RuntimeCallFunctionOnArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeCallFunctionOnReply contains the return values for runtimeCallFunctionOn.
type RuntimeCallFunctionOnReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Call result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeGetPropertiesArgs contains the arguments for runtimeGetProperties.
type RuntimeGetPropertiesArgs struct {
	ObjectID               cdptype.RuntimeRemoteObjectID `json:"objectId"`                         // Identifier of the object to return properties for.
	OwnProperties          *bool                         `json:"ownProperties,omitempty"`          // If true, returns properties belonging only to the element itself, not to its prototype chain.
	AccessorPropertiesOnly *bool                         `json:"accessorPropertiesOnly,omitempty"` // If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
	GeneratePreview        *bool                         `json:"generatePreview,omitempty"`        // Whether preview should be generated for the results.
}

// SetOwnProperties sets the OwnProperties optional argument. If true, returns properties belonging only to the element itself, not to its prototype chain.
func (a *RuntimeGetPropertiesArgs) SetOwnProperties(ownProperties bool) *RuntimeGetPropertiesArgs {
	a.OwnProperties = &ownProperties
	return a
}

// SetAccessorPropertiesOnly sets the AccessorPropertiesOnly optional argument. If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
func (a *RuntimeGetPropertiesArgs) SetAccessorPropertiesOnly(accessorPropertiesOnly bool) *RuntimeGetPropertiesArgs {
	a.AccessorPropertiesOnly = &accessorPropertiesOnly
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the results.
func (a *RuntimeGetPropertiesArgs) SetGeneratePreview(generatePreview bool) *RuntimeGetPropertiesArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// RuntimeGetPropertiesReply contains the return values for runtimeGetProperties.
type RuntimeGetPropertiesReply struct {
	Result             []cdptype.RuntimePropertyDescriptor         `json:"result"`                       // Object properties.
	InternalProperties []cdptype.RuntimeInternalPropertyDescriptor `json:"internalProperties,omitempty"` // Internal object properties (only of the element itself).
	ExceptionDetails   *cdptype.RuntimeExceptionDetails            `json:"exceptionDetails,omitempty"`   // Exception details.
}

// RuntimeReleaseObjectArgs contains the arguments for runtimeReleaseObject.
type RuntimeReleaseObjectArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // Identifier of the object to release.
}

// RuntimeReleaseObjectGroupArgs contains the arguments for runtimeReleaseObjectGroup.
type RuntimeReleaseObjectGroupArgs struct {
	ObjectGroup string `json:"objectGroup"` // Symbolic object group name.
}

// RuntimeSetCustomObjectFormatterEnabledArgs contains the arguments for runtimeSetCustomObjectFormatterEnabled.
type RuntimeSetCustomObjectFormatterEnabledArgs struct {
	Enabled bool `json:"enabled"` //
}

// RuntimeCompileScriptArgs contains the arguments for runtimeCompileScript.
type RuntimeCompileScriptArgs struct {
	Expression         string                             `json:"expression"`                   // Expression to compile.
	SourceURL          string                             `json:"sourceURL"`                    // Source url to be set for the script.
	PersistScript      bool                               `json:"persistScript"`                // Specifies whether the compiled script should be persisted.
	ExecutionContextID *cdptype.RuntimeExecutionContextID `json:"executionContextId,omitempty"` // Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
}

// SetExecutionContextID sets the ExecutionContextID optional argument. Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeCompileScriptArgs) SetExecutionContextID(executionContextID cdptype.RuntimeExecutionContextID) *RuntimeCompileScriptArgs {
	a.ExecutionContextID = &executionContextID
	return a
}

// RuntimeCompileScriptReply contains the return values for runtimeCompileScript.
type RuntimeCompileScriptReply struct {
	ScriptID         *cdptype.RuntimeScriptID         `json:"scriptId,omitempty"`         // Id of the script.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeRunScriptArgs contains the arguments for runtimeRunScript.
type RuntimeRunScriptArgs struct {
	ScriptID              cdptype.RuntimeScriptID            `json:"scriptId"`                        // Id of the script to run.
	ExecutionContextID    *cdptype.RuntimeExecutionContextID `json:"executionContextId,omitempty"`    // Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
	ObjectGroup           *string                            `json:"objectGroup,omitempty"`           // Symbolic group name that can be used to release multiple objects.
	Silent                *bool                              `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	IncludeCommandLineAPI *bool                              `json:"includeCommandLineAPI,omitempty"` // Determines whether Command Line API should be available during the evaluation.
	ReturnByValue         *bool                              `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object which should be sent by value.
	GeneratePreview       *bool                              `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	AwaitPromise          *bool                              `json:"awaitPromise,omitempty"`          // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// SetExecutionContextID sets the ExecutionContextID optional argument. Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeRunScriptArgs) SetExecutionContextID(executionContextID cdptype.RuntimeExecutionContextID) *RuntimeRunScriptArgs {
	a.ExecutionContextID = &executionContextID
	return a
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *RuntimeRunScriptArgs) SetObjectGroup(objectGroup string) *RuntimeRunScriptArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeRunScriptArgs) SetSilent(silent bool) *RuntimeRunScriptArgs {
	a.Silent = &silent
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Determines whether Command Line API should be available during the evaluation.
func (a *RuntimeRunScriptArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *RuntimeRunScriptArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object which should be sent by value.
func (a *RuntimeRunScriptArgs) SetReturnByValue(returnByValue bool) *RuntimeRunScriptArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeRunScriptArgs) SetGeneratePreview(generatePreview bool) *RuntimeRunScriptArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeRunScriptArgs) SetAwaitPromise(awaitPromise bool) *RuntimeRunScriptArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeRunScriptReply contains the return values for runtimeRunScript.
type RuntimeRunScriptReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Run result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// SchemaGetDomainsReply contains the return values for schemaGetDomains.
type SchemaGetDomainsReply struct {
	Domains []cdptype.SchemaDomain `json:"domains"` // List of supported domains.
}

// ServiceWorkerUnregisterArgs contains the arguments for serviceworkerUnregister.
type ServiceWorkerUnregisterArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// ServiceWorkerUpdateRegistrationArgs contains the arguments for serviceworkerUpdateRegistration.
type ServiceWorkerUpdateRegistrationArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// ServiceWorkerStartWorkerArgs contains the arguments for serviceworkerStartWorker.
type ServiceWorkerStartWorkerArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// ServiceWorkerSkipWaitingArgs contains the arguments for serviceworkerSkipWaiting.
type ServiceWorkerSkipWaitingArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// ServiceWorkerStopWorkerArgs contains the arguments for serviceworkerStopWorker.
type ServiceWorkerStopWorkerArgs struct {
	VersionID string `json:"versionId"` //
}

// ServiceWorkerInspectWorkerArgs contains the arguments for serviceworkerInspectWorker.
type ServiceWorkerInspectWorkerArgs struct {
	VersionID string `json:"versionId"` //
}

// ServiceWorkerSetForceUpdateOnPageLoadArgs contains the arguments for serviceworkerSetForceUpdateOnPageLoad.
type ServiceWorkerSetForceUpdateOnPageLoadArgs struct {
	ForceUpdateOnPageLoad bool `json:"forceUpdateOnPageLoad"` //
}

// ServiceWorkerDeliverPushMessageArgs contains the arguments for serviceworkerDeliverPushMessage.
type ServiceWorkerDeliverPushMessageArgs struct {
	Origin         string `json:"origin"`         //
	RegistrationID string `json:"registrationId"` //
	Data           string `json:"data"`           //
}

// ServiceWorkerDispatchSyncEventArgs contains the arguments for serviceworkerDispatchSyncEvent.
type ServiceWorkerDispatchSyncEventArgs struct {
	Origin         string `json:"origin"`         //
	RegistrationID string `json:"registrationId"` //
	Tag            string `json:"tag"`            //
	LastChance     bool   `json:"lastChance"`     //
}

// StorageClearDataForOriginArgs contains the arguments for storageClearDataForOrigin.
type StorageClearDataForOriginArgs struct {
	Origin       string `json:"origin"`       // Security origin.
	StorageTypes string `json:"storageTypes"` // Comma separated origin names.
}

// SystemInfoGetInfoReply contains the return values for systeminfoGetInfo.
type SystemInfoGetInfoReply struct {
	GPU          cdptype.SystemInfoGPUInfo `json:"gpu"`          // Information about the GPUs on the system.
	ModelName    string                    `json:"modelName"`    // A platform-dependent description of the model of the machine. On Mac OS, this is, for example, 'MacBookPro'. Will be the empty string if not supported.
	ModelVersion string                    `json:"modelVersion"` // A platform-dependent description of the version of the machine. On Mac OS, this is, for example, '10.1'. Will be the empty string if not supported.
}

// TargetSetDiscoverTargetsArgs contains the arguments for targetSetDiscoverTargets.
type TargetSetDiscoverTargetsArgs struct {
	Discover bool `json:"discover"` // Whether to discover available targets.
}

// TargetSetAutoAttachArgs contains the arguments for targetSetAutoAttach.
type TargetSetAutoAttachArgs struct {
	AutoAttach             bool `json:"autoAttach"`             // Whether to auto-attach to related targets.
	WaitForDebuggerOnStart bool `json:"waitForDebuggerOnStart"` // Whether to pause new targets when attaching to them. Use Runtime.runIfWaitingForDebugger to run paused targets.
}

// TargetSetAttachToFramesArgs contains the arguments for targetSetAttachToFrames.
type TargetSetAttachToFramesArgs struct {
	Value bool `json:"value"` // Whether to attach to frames.
}

// TargetSetRemoteLocationsArgs contains the arguments for targetSetRemoteLocations.
type TargetSetRemoteLocationsArgs struct {
	Locations []cdptype.TargetRemoteLocation `json:"locations"` // List of remote locations.
}

// TargetSendMessageToTargetArgs contains the arguments for targetSendMessageToTarget.
type TargetSendMessageToTargetArgs struct {
	TargetID string `json:"targetId"` //
	Message  string `json:"message"`  //
}

// TargetGetTargetInfoArgs contains the arguments for targetGetTargetInfo.
type TargetGetTargetInfoArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetGetTargetInfoReply contains the return values for targetGetTargetInfo.
type TargetGetTargetInfoReply struct {
	TargetInfo cdptype.TargetInfo `json:"targetInfo"` //
}

// TargetActivateTargetArgs contains the arguments for targetActivateTarget.
type TargetActivateTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetCloseTargetArgs contains the arguments for targetCloseTarget.
type TargetCloseTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetCloseTargetReply contains the return values for targetCloseTarget.
type TargetCloseTargetReply struct {
	Success bool `json:"success"` //
}

// TargetAttachToTargetArgs contains the arguments for targetAttachToTarget.
type TargetAttachToTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetAttachToTargetReply contains the return values for targetAttachToTarget.
type TargetAttachToTargetReply struct {
	Success bool `json:"success"` // Whether attach succeeded.
}

// TargetDetachFromTargetArgs contains the arguments for targetDetachFromTarget.
type TargetDetachFromTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetCreateBrowserContextReply contains the return values for targetCreateBrowserContext.
type TargetCreateBrowserContextReply struct {
	BrowserContextID cdptype.TargetBrowserContextID `json:"browserContextId"` // The id of the context created.
}

// TargetDisposeBrowserContextArgs contains the arguments for targetDisposeBrowserContext.
type TargetDisposeBrowserContextArgs struct {
	BrowserContextID cdptype.TargetBrowserContextID `json:"browserContextId"` //
}

// TargetDisposeBrowserContextReply contains the return values for targetDisposeBrowserContext.
type TargetDisposeBrowserContextReply struct {
	Success bool `json:"success"` //
}

// TargetCreateTargetArgs contains the arguments for targetCreateTarget.
type TargetCreateTargetArgs struct {
	URL              string                          `json:"url"`                        // The initial URL the page will be navigated to.
	Width            *int                            `json:"width,omitempty"`            // Frame width in DIP (headless chrome only).
	Height           *int                            `json:"height,omitempty"`           // Frame height in DIP (headless chrome only).
	BrowserContextID *cdptype.TargetBrowserContextID `json:"browserContextId,omitempty"` // The browser context to create the page in (headless chrome only).
}

// SetWidth sets the Width optional argument. Frame width in DIP (headless chrome only).
func (a *TargetCreateTargetArgs) SetWidth(width int) *TargetCreateTargetArgs {
	a.Width = &width
	return a
}

// SetHeight sets the Height optional argument. Frame height in DIP (headless chrome only).
func (a *TargetCreateTargetArgs) SetHeight(height int) *TargetCreateTargetArgs {
	a.Height = &height
	return a
}

// SetBrowserContextID sets the BrowserContextID optional argument. The browser context to create the page in (headless chrome only).
func (a *TargetCreateTargetArgs) SetBrowserContextID(browserContextID cdptype.TargetBrowserContextID) *TargetCreateTargetArgs {
	a.BrowserContextID = &browserContextID
	return a
}

// TargetCreateTargetReply contains the return values for targetCreateTarget.
type TargetCreateTargetReply struct {
	TargetID cdptype.TargetID `json:"targetId"` // The id of the page opened.
}

// TargetGetTargetsReply contains the return values for targetGetTargets.
type TargetGetTargetsReply struct {
	TargetInfos []cdptype.TargetInfo `json:"targetInfos"` // The list of targets.
}

// TetheringBindArgs contains the arguments for tetheringBind.
type TetheringBindArgs struct {
	Port int `json:"port"` // Port number to bind.
}

// TetheringUnbindArgs contains the arguments for tetheringUnbind.
type TetheringUnbindArgs struct {
	Port int `json:"port"` // Port number to unbind.
}

// TracingStartArgs contains the arguments for tracingStart.
type TracingStartArgs struct {
	Categories                   *string                     `json:"categories,omitempty"`                   // Category/tag filter
	Options                      *string                     `json:"options,omitempty"`                      // Tracing options
	BufferUsageReportingInterval *float64                    `json:"bufferUsageReportingInterval,omitempty"` // If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
	TransferMode                 *string                     `json:"transferMode,omitempty"`                 // Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ReportEvents).
	TraceConfig                  *cdptype.TracingTraceConfig `json:"traceConfig,omitempty"`                  //
}

// SetCategories sets the Categories optional argument. Category/tag filter
func (a *TracingStartArgs) SetCategories(categories string) *TracingStartArgs {
	a.Categories = &categories
	return a
}

// SetOptions sets the Options optional argument. Tracing options
func (a *TracingStartArgs) SetOptions(options string) *TracingStartArgs {
	a.Options = &options
	return a
}

// SetBufferUsageReportingInterval sets the BufferUsageReportingInterval optional argument. If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
func (a *TracingStartArgs) SetBufferUsageReportingInterval(bufferUsageReportingInterval float64) *TracingStartArgs {
	a.BufferUsageReportingInterval = &bufferUsageReportingInterval
	return a
}

// SetTransferMode sets the TransferMode optional argument. Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ReportEvents).
func (a *TracingStartArgs) SetTransferMode(transferMode string) *TracingStartArgs {
	a.TransferMode = &transferMode
	return a
}

// SetTraceConfig sets the TraceConfig optional argument.
func (a *TracingStartArgs) SetTraceConfig(traceConfig cdptype.TracingTraceConfig) *TracingStartArgs {
	a.TraceConfig = &traceConfig
	return a
}

// TracingGetCategoriesReply contains the return values for tracingGetCategories.
type TracingGetCategoriesReply struct {
	Categories []string `json:"categories"` // A list of supported tracing categories.
}

// TracingRequestMemoryDumpReply contains the return values for tracingRequestMemoryDump.
type TracingRequestMemoryDumpReply struct {
	DumpGUID string `json:"dumpGuid"` // GUID of the resulting global memory dump.
	Success  bool   `json:"success"`  // True iff the global memory dump succeeded.
}

// TracingRecordClockSyncMarkerArgs contains the arguments for tracingRecordClockSyncMarker.
type TracingRecordClockSyncMarkerArgs struct {
	SyncID string `json:"syncId"` // The ID of this clock sync marker
}
