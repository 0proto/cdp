// Code generated by cdpgen; DO NOT EDIT!

package cdp

import "github.com/mafredri/cdp/rpcc"

// Client represents a Chrome Debugging Protocol client that can be used to
// invoke methods or listen to events in every CDP domain. The Client consumes
// a rpcc connection, used to invoke the methods.
type Client struct {
	Accessibility     Accessibility
	Animation         Animation
	ApplicationCache  ApplicationCache
	CSS               CSS
	CacheStorage      CacheStorage
	Console           Console
	DOM               DOM
	DOMDebugger       DOMDebugger
	DOMStorage        DOMStorage
	Database          Database
	Debugger          Debugger
	DeviceOrientation DeviceOrientation
	Emulation         Emulation
	HeapProfiler      HeapProfiler
	IO                IO
	IndexedDB         IndexedDB
	Input             Input
	Inspector         Inspector
	LayerTree         LayerTree
	Log               Log
	Memory            Memory
	Network           Network
	Page              Page
	Profiler          Profiler
	Rendering         Rendering
	Runtime           Runtime
	Schema            Schema
	Security          Security
	ServiceWorker     ServiceWorker
	Storage           Storage
	SystemInfo        SystemInfo
	Target            Target
	Tethering         Tethering
	Tracing           Tracing
}

// NewClient returns a new Client.
func NewClient(conn *rpcc.Conn) *Client {
	return &Client{
		Accessibility:     &accessibilityDomain{conn: conn},
		Animation:         &animationDomain{conn: conn},
		ApplicationCache:  &applicationcacheDomain{conn: conn},
		CSS:               &cssDomain{conn: conn},
		CacheStorage:      &cachestorageDomain{conn: conn},
		Console:           &consoleDomain{conn: conn},
		DOM:               &domDomain{conn: conn},
		DOMDebugger:       &domdebuggerDomain{conn: conn},
		DOMStorage:        &domstorageDomain{conn: conn},
		Database:          &databaseDomain{conn: conn},
		Debugger:          &debuggerDomain{conn: conn},
		DeviceOrientation: &deviceorientationDomain{conn: conn},
		Emulation:         &emulationDomain{conn: conn},
		HeapProfiler:      &heapprofilerDomain{conn: conn},
		IO:                &ioDomain{conn: conn},
		IndexedDB:         &indexeddbDomain{conn: conn},
		Input:             &inputDomain{conn: conn},
		Inspector:         &inspectorDomain{conn: conn},
		LayerTree:         &layertreeDomain{conn: conn},
		Log:               &logDomain{conn: conn},
		Memory:            &memoryDomain{conn: conn},
		Network:           &networkDomain{conn: conn},
		Page:              &pageDomain{conn: conn},
		Profiler:          &profilerDomain{conn: conn},
		Rendering:         &renderingDomain{conn: conn},
		Runtime:           &runtimeDomain{conn: conn},
		Schema:            &schemaDomain{conn: conn},
		Security:          &securityDomain{conn: conn},
		ServiceWorker:     &serviceworkerDomain{conn: conn},
		Storage:           &storageDomain{conn: conn},
		SystemInfo:        &systeminfoDomain{conn: conn},
		Target:            &targetDomain{conn: conn},
		Tethering:         &tetheringDomain{conn: conn},
		Tracing:           &tracingDomain{conn: conn},
	}
}
